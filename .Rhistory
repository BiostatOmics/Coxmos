# mixOmics
vector = NULL
MIN_NVAR = 10
MAX_NVAR = 1000
n.cut_points = 5
# Eval stop detection
MIN_AUC_INCREASE = 0.01 # 1%
MIN_AUC = 0.75 # 75%
MIN_COMP_TO_CHECK = 3
EVAL_METHOD = "cenROC"
# Model Lists
lst_models_full <- NULL
lst_models <- NULL
lst_models_pls <- NULL
# Evaluation multiple models
max_time_points = 15
#### ### ### #### ### ### ###
#Cross Validation Parameters #
#### ### ### ### ### #### ###
n_run = 5
k_folds = 10
fast_mode = F
pred.method = "cenROC"
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
best_cox <- cox(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
FORCE = FORCE,
returnData = returnData,
verbose = verbose)
lst_models_full[[best_cox$class]] = best_cox
lst_models[[best_cox$class]] = best_cox
best_coxSW <- coxSW(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
initialModel = initialModel, toKeep.sw = toKeep.sw,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
max.variables = ncol(X_train),
boostDeletion = boostDeletion,
alpha = alpha, alpha_ENT = alpha_ENT, alpha_OUT = alpha_OUT, alpha_PH  = alpha_PH, check_PH = check_PH,
MIN_EPV = MIN_EPV,
BACKWARDS = BACKWARDS, verbose = verbose)
lst_models_full[[best_coxSW$class]] = best_coxSW
lst_models[[best_coxSW$class]] = best_coxSW
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = EN.alpha.list, #EN penalization
max.variables = ncol(X_train),
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
best_coxEN <- coxEN(X = X_train, Y = Y_train,
EN.alpha = cv.coxEN_res$opt.EN.alpha,
max.variables = cv.coxEN_res$opt.nvar,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
lst_models_full[[cv.coxEN_res$class]] = cv.coxEN_res
lst_models_full[[best_coxEN$class]] = best_coxEN
lst_models[[best_coxEN$class]] = best_coxEN
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
best_plsicox <- plsicox(X = X_train, Y = Y_train,
n.comp = cv.plsicox_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
lst_models_full[[cv.plsicox_res$class]] = cv.plsicox_res
lst_models_full[[best_plsicox$class]] = best_plsicox
lst_models[[best_plsicox$class]] = best_plsicox
lst_models_pls[[best_plsicox$class]] = best_plsicox
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, eta.list = eta.list,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
best_splsdrcox <- splsdrcox(X = X_train, Y = Y_train,
n.comp = cv.splsdrcox_res$opt.comp,
eta = cv.splsdrcox_res$opt.eta,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
lst_models_full[[cv.splsdrcox_res$class]] = cv.splsdrcox_res
lst_models_full[[best_splsdrcox$class]] = best_splsdrcox
lst_models[[best_splsdrcox$class]] = best_splsdrcox
lst_models_pls[[best_splsdrcox$class]] = best_splsdrcox
cv.splsdrcox_mixOmics_res <- cv.splsdrcox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, vector = vector,
MIN_NVAR = MIN_NVAR, MAX_NVAR = MAX_NVAR, n.cut_points = n.cut_points, EVAL_METHOD = EVAL_METHOD,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
remove_non_significant_models = remove_non_significant_models,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
best_splsdrcox_mixOmics <- splsdrcox_mixOmics(X = X_train, Y = Y_train,
n.comp = cv.splsdrcox_mixOmics_res$opt.comp,
vector = cv.splsdrcox_mixOmics_res$opt.nvar,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
lst_models_full[[cv.splsdrcox_mixOmics_res$class]] = cv.splsdrcox_mixOmics_res
lst_models_full[[best_splsdrcox_mixOmics$class]] = best_splsdrcox_mixOmics
lst_models[[best_splsdrcox_mixOmics$class]] = best_splsdrcox_mixOmics
lst_models_pls[[best_splsdrcox_mixOmics$class]] = best_splsdrcox_mixOmics
cv.splsdacox_mixOmics_res <- cv.splsdacox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, vector = vector,
MIN_NVAR = MIN_NVAR, MAX_NVAR = MAX_NVAR, n.cut_points = n.cut_points, EVAL_METHOD = EVAL_METHOD,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
remove_non_significant_models = remove_non_significant_models,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
best_splsdacox_mixOmics <- splsdacox_mixOmics(X_train, Y_train,
n.comp = cv.splsdacox_mixOmics_res$opt.comp,
vector = cv.splsdacox_mixOmics_res$opt.nvar,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
save(list = c("cv.splsdacox_mixOmics_res", "best_splsdacox_mixOmics"), file = paste0(aux_folder, "splsdacox_mixOmics.RData"))
lst_models_full[[cv.splsdacox_mixOmics_res$class]] = cv.splsdacox_mixOmics_res
lst_models_full[[best_splsdacox_mixOmics$class]] = best_splsdacox_mixOmics
lst_models[[best_splsdacox_mixOmics$class]] = best_splsdacox_mixOmics
lst_models_pls[[best_splsdacox_mixOmics$class]] = best_splsdacox_mixOmics
eval_results <- purrr::map(lst_evaluations, ~eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test, pred.method = .,
pred.attr = pred.attr, verbose = verbose,
times = times, max_time_points = max_time_points, PARALLEL = PARALLEL))
lst_ggp <- plot_evaluation.list(eval_results)
ggp_time <- plot_time.list(lst_models_full)
ggp_time
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models = lst_models)
lst_plots <- purrr::map(lst_models[1], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[2], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[3], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[4], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[5], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[6], ~plot_proportionalHazard(model = .))
lst_plots <- purrr::map(lst_models[7], ~plot_proportionalHazard(model = .))
length(lst_models)
lst_plots <- purrr::map(lst_models[2], ~plot_proportionalHazard(model = .))
lst_models$coxSW$survival_model
model <- lst_models$coxSW$survival_model
model$survival_model$fit
devtools::load_all(".")
best_coxSW <- coxSW(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
initialModel = initialModel, toKeep.sw = toKeep.sw,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
max.variables = ncol(X_train),
boostDeletion = boostDeletion,
alpha = alpha, alpha_ENT = alpha_ENT, alpha_OUT = alpha_OUT, alpha_PH  = alpha_PH, check_PH = check_PH,
MIN_EPV = MIN_EPV,
BACKWARDS = BACKWARDS, verbose = verbose)
devtools::load_all(".")
best_coxSW <- coxSW(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
initialModel = initialModel, toKeep.sw = toKeep.sw,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
max.variables = ncol(X_train),
boostDeletion = boostDeletion,
alpha = alpha, alpha_ENT = alpha_ENT, alpha_OUT = alpha_OUT, alpha_PH  = alpha_PH, check_PH = check_PH,
MIN_EPV = MIN_EPV,
BACKWARDS = BACKWARDS, verbose = verbose)
best_coxSW <- coxSW(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
initialModel = initialModel, toKeep.sw = toKeep.sw,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
max.variables = ncol(X_train),
boostDeletion = boostDeletion,
alpha = alpha, alpha_ENT = alpha_ENT, alpha_OUT = alpha_OUT, alpha_PH  = alpha_PH, check_PH = check_PH,
MIN_EPV = MIN_EPV,
BACKWARDS = BACKWARDS, verbose = F)
#load data
#load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_cancer.RData")
#load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_ovarian_clinical.RData")
#load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_E.MTAB.386_clinical.RData")
load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_GSE49997_clinical.RData")
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
X = X_train
Y = Y_train
t1 <- Sys.time()
#### ### ###
# WARNINGS #
#### ### ###
#Check evaluator installed:
checkLibraryEvaluator(pred.method)
#### REQUIREMENTS
checkY.colnames(Y)
check.cv.weights(c(w_AIC, w_c.index, w_AUC))
max.ncomp <- check.ncomp(X, max.ncomp)
# if(!pred.method %in% c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I")){
#   stop_quietly(paste0("pred.method must be one of the following: ", paste0(c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I"), collapse = ", ")))
# }
if(!pred.method %in% pkg.env$AUC_evaluators){
stop_quietly(paste0("pred.method must be one of the following: ", paste0(pkg.env$AUC_evaluators, collapse = ", ")))
}
#### MAX PREDICTORS
max.ncomp <- check.maxPredictors(X, Y, MIN_EPV, max.ncomp)
#### REQUIREMENTS
lst_dnz <- deleteZeroOrNearZeroVariance(X = X,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
freqCut = 95/5)
X <- lst_dnz$X
variablesDeleted <- lst_dnz$variablesDeleted
#### #
# CV #
#### #
set.seed(seed)
lst_data <- splitData_Iterations_Folds(X, Y, n_run = n_run, k_folds = k_folds) #FOR TEST
lst_X_train <- lst_data$lst_X_train
lst_Y_train <- lst_data$lst_Y_train
lst_X_test <- lst_data$lst_X_test
lst_Y_test <- lst_data$lst_Y_test
#### ### ### ###
# TRAIN MODELS #
#### ### ### ###
total_models <- 1 * k_folds * n_run #with greatest component we have all of them
comp_model_lst <- get_HDCOX_models2.0(method = pkg.env$plsicox,
lst_X_train = lst_X_train, lst_Y_train = lst_Y_train,
max.ncomp = max.ncomp, eta.list = NULL, EN.alpha.list = NULL, n_run = n_run, k_folds = k_folds,
x.center = x.center, x.scale = x.scale, y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = F, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = remove_non_significant,
total_models = total_models, PARALLEL = PARALLEL, verbose = verbose)
method = pkg.env$plsicox
eta.list = NULL
EN.alpha.list = NULL
toKeep.zv = NULL
remove_zero_variance = F
remove_near_zero_variance = F
method = pkg.env$plsicox
comp_model_lst <- list()
fold_list <- list()
run_list <- list()
eta_model_lst <- NULL
info <- NULL # for sPLS
## CHECK METHOD
if(is.null(eta.list) & is.null(EN.alpha.list) & !method %in% c(pkg.env$plsicox, pkg.env$splsdacox_mixomics, pkg.env$splsdrcox_mixomics, pkg.env$sb.plsicox, pkg.env$mb.splsdrcox, pkg.env$mb.splsdacox)){
stop_quietly("Method must be one of 'PLS-ICOX', 'sPLS-DACOX-MixOmics', 'MB.sPLS-DACOX' or 'sPLS-DRCOX-MixOmics' if 'eta.list' and 'EN.alpha.list' is NULL.")
}else if(!is.null(eta.list) & is.null(EN.alpha.list)  & !method %in% c(pkg.env$splsdrcox, pkg.env$sb.splsdrcox)){
stop_quietly("Method must be 'sPLS-DRCOX' if 'eta.list' is not NULL.")
}else if(!is.null(EN.alpha.list) & !method %in% c(pkg.env$coxEN)){
stop_quietly("Method must be 'coxEN' if 'EN.alpha.list' is not NULL.")
}
# if(method==pkg.env$splsdrcox){
#   if(is.null(n_run.mixOmics)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'n_run.mixOmics' cannot be NULL.")
#   }
#   if(is.null(k_folds.mixOmics)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'k_folds.mixOmics' cannot be NULL.")
#   }
#   if(is.null(test.keepX)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'test.keepX' cannot be NULL.")
#   }
# }
pb_text <- "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated remaining time: :eta]"
pb <- progress::progress_bar$new(format = pb_text,
total = total_models,
complete = "=",   # Caracteres de las iteraciones finalizadas
incomplete = "-", # Caracteres de las iteraciones no finalizadas
current = ">",    # Caracter actual
clear = FALSE,    # Si TRUE, borra la barra cuando termine
width = 100)      # Ancho de la barra de progreso
message(paste0("Training all possible models for ", method, "..."))
pb$tick(0)
#function to compute all models at the same time - just last component
lst_inputs <- list()
cont = 1
lst_names = NULL
for(i in max.ncomp){
for(r in 1:n_run){
for(f in 1:k_folds){
lst_inputs[[cont]] = list()
lst_inputs[[cont]]$comp = i
lst_inputs[[cont]]$run <- r
lst_inputs[[cont]]$fold <- f
lst_names <- c(lst_names, paste0(i, "_", r, "_", f))
cont = cont + 1
}
names(lst_inputs) <- lst_names
lst_all_models <- purrr::map(lst_inputs, ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[1], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[2], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[3], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[4], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[5], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[6], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[7], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[8], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[10], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
length(lst_inputs)
lst_all_models <- purrr::map(lst_inputs[10:20], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[10:15], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[13:15], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
lst_all_models <- purrr::map(lst_inputs[12], ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
returnData = F))
