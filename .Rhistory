new_cutoff
cutoff <- lst_cutoff$`SB.sPLS-DRCOX`
new_cutoff <- cutoff[endsWith(names(cutoff), paste0("_",b))]
names(new_cutoff) <- unlist(lapply(names(new_cutoff), function(x){substr(x, start = 1, stop = nchar(x)-nchar(paste0("_",b)))}))
new_cutoff
cutoff
cutoff <- lst_cutoff$`SB.sPLS-DRCOX`
cutoff
new_cutoff <- cutoff[endsWith(names(cutoff), paste0("_",b))]
names(new_cutoff) <- unlist(lapply(names(new_cutoff), function(x){substr(x, start = 1, stop = nchar(x)-nchar(paste0("_",b)))}))
lst_ggp[[b]] <- getTestKM(model$list_spls_models[[b]], X_test[[b]], Y_test, new_cutoff, type, ori_data, BREAKTIME, n.breaks, title)
lst_ggp$genes$PRAME
devtools::load_all(".")
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
LST_KM_TEST_LP <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "LP",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_COMP)
LST_KM_TEST_COMP <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "COMP",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
lst_cutoff
LST_KM_TEST_COMP$`MB.sPLS-DRCOX`$comp_1_clinical
LST_KM_TEST_COMP$`MB.sPLS-DRCOX`$comp_1_genes
LST_KM_TEST_COMP$`MB.sPLS-DRCOX`$comp_2_genes
LST_KM_TEST_COMP$`MB.sPLS-DACOX`$comp_1_genes
LST_KM_TEST_COMP$`SB.sPLS-DRCOX`$comp_1_genes
LST_KM_TEST_COMP$`SB.PLS-ICOX`$comp_1_genes
LST_KM_TEST_COMP$`SB.PLS-ICOX`$comp_2_genes
LST_KM_RES_COMP$`SB.PLS-ICOX`$LST_PLOTS$genes$comp_1
lst_models$`SB.PLS-ICOX`$survival_model$fit
type = "COMP"
model <- lst_models$`MB.sPLS-DACOX`
cutoff <- lst_cutoff$`MB.sPLS-DACOX`
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(!is.numeric(cutoff)){
message("cutoff parameter must be numeric. Returning NA")
return(NA)
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
if(is.null(title)){
title = attr(model, "model")
}else{
title = paste0(attr(model, "model"), " - ", title)
}
title
title <- NULL
if(is.null(title)){
title = attr(model, "model")
}else{
title = paste0(attr(model, "model"), " - ", title)
}
title
lst_test_lp <- NULL
lst_ggp <- NULL
#predict scores X_test
test_score <- predict(model, newdata = X_test)
test_score <- test_score[,names(model$survival_model$coef),drop=F]
test_score
X_test
class(model)
atrr(model, "model")
attr(model, "model")
#predict scores X_test
test_score <- predict(model, newdata = X_test)
test_score
names(model$survival_model$coef)
test_score <- test_score[,names(model$survival_model$coef),drop=F]
test_score
names(model$survival_model$coef)
cn = names(model$survival_model$coef)
#get LP for individual components
lst_test_lp[[cn]] <- test_score[,cn,drop=F] %*% model$survival_model$fit$coefficients[cn]
colnames(lst_test_lp[[cn]]) <- cn
lst_test_lp
head(model$X$scores)
model$X$scores<= -5.14
sum(model$X$scores<= -5.14)
sum(model$X$scores<= -5,14)
sum(model$X$scores[[1]] <= -5,14)
devtools::load_all(".")
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_VAR)
LST_KM_TEST_VAR <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "VAR",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
type = "VAR"
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(type == "COMP"){
if(all(unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods))){
sub_lst_models <- lst_models
}else{
sub_lst_models <- lst_models[unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods)]
if(verbose){
message(paste0("Model ", paste0(names(lst_models[!unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods)]), collapse = ", "), " are not based in PLS methodology. Other models computed."))
}
}else{
sub_lst_models <- lst_models
}
if(!length(sub_lst_models) == length(lst_cutoff) & !length(lst_cutoff) == 1){
stop("List of models and list of cutoff must have the same length or list of cutoff must be just one value.")
}
LST_GGP <- NULL
LST_GGP <- purrr::map2(.x = sub_lst_models[4], .y = lst_cutoff[4], ~getTestKM(model = .x,
X_test = X_test, Y_test = Y_test,
cutoff = .y, type = type, ori_data = ori_data,
BREAKTIME = BREAKTIME, n.breaks = n.breaks, title = title))
model <- lst_models$`SB.PLS-ICOX`
cutoff <- lst_cutoff$`SB.PLS-ICOX`
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(!is.numeric(cutoff)){
message("cutoff parameter must be numeric. Returning NA")
return(NA)
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
if(is.null(title)){
title = attr(model, "model")
}else{
title = paste0(attr(model, "model"), " - ", title)
}
lst_ggp <- NULL
## SB.PLSICOX
if(attr(model, "model") %in% c(pkg.env$sb.plsicox)){
for(b in names(model$list_pls_models)){
new_cutoff <- cutoff[endsWith(names(cutoff), paste0("_",b))]
names(new_cutoff) <- unlist(lapply(names(new_cutoff), function(x){substr(x, start = 1, stop = nchar(x)-nchar(paste0("_",b)))}))
lst_ggp[[b]] <- getTestKM(model$list_pls_models[[b]], X_test[[b]], Y_test, new_cutoff, type, ori_data, BREAKTIME, n.breaks, title)
}
return(lst_ggp)
}else{
## SB.sPLSDRCOX
for(b in names(model$list_spls_models)){
new_cutoff <- cutoff[endsWith(names(cutoff), paste0("_",b))]
names(new_cutoff) <- unlist(lapply(names(new_cutoff), function(x){substr(x, start = 1, stop = nchar(x)-nchar(paste0("_",b)))}))
lst_ggp[[b]] <- getTestKM(model$list_spls_models[[b]], X_test[[b]], Y_test, new_cutoff, type, ori_data, BREAKTIME, n.breaks, title)
}
return(lst_ggp)
}
b
new_cutoff <- cutoff[endsWith(names(cutoff), paste0("_",b))]
names(new_cutoff) <- unlist(lapply(names(new_cutoff), function(x){substr(x, start = 1, stop = nchar(x)-nchar(paste0("_",b)))}))
names(new_cutoff)
model = model$list_pls_models[[b]]
X_test = X_test[[b]]
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(!is.numeric(cutoff)){
message("cutoff parameter must be numeric. Returning NA")
return(NA)
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
if(is.null(title)){
title = attr(model, "model")
}else{
title = paste0(attr(model, "model"), " - ", title)
}
X_test <- X_test[,names(cutoff),drop=F]
lst_ggp <- NULL
cutoff
cutoff <- new_cutoff
cutoff
X_test <- X_test[,names(cutoff),drop=F]
lst_ggp <- NULL
if(!ori_data){
X_test <- scale(X_test, center = model$X$x.mean[colnames(X_test)], scale = model$X$x.sd[colnames(X_test)])
}
for(cn in colnames(X_test)){
txt_greater <- paste0("greater than ", cutoff[[cn]])
txt_lower <- paste0("lesser/equal than ", cutoff[[cn]])
LP <- ifelse(X_test[[cn]]>cutoff[[cn]], txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
colnames(d) <- cn
lst_ggp[[cn]] <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = cn,
name_data = NULL, title = title)[[cn]]
}
cn
data = d
sdata = data.frame(Y_test)
cn_variables = cn
name_data = NULL
lst_splots <- list()
cn
cn_variables
#delete NAs
aux <- aux[!is.na(aux[,3]),]
is.null(name_data)
if(!cn %in% colnames(data)){
message(paste0("Variable ", cn, " not found in data."))
next
}else{
aux <- cbind(sdata, data[,cn])
}
aux
data
d
LP
txt_greater <- paste0("greater than ", cutoff[[cn]])
txt_lower <- paste0("lesser/equal than ", cutoff[[cn]])
X_test
X_test[[cn]]
LP <- ifelse(X_test[[cn]]>cutoff[[cn]], txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
d
LP
LP <- ifelse(X_test[[cn]]>cutoff[[cn]], txt_greater, txt_lower)
LP
X_test[[cn]]
cutoff
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_VAR)
lst_cutoff
LST_KM_RES_VAR$`SB.PLS-ICOX`$info_logrank_num
devtools::load_all(".")
type = "VAR"
comp = 1:10
top = 20
ori_data = T
if(all(is.na(model$survival_model))){
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
lst_vars <- list()
for(b in names(model$X$data)){
vars <- list()
vars_data <- list()
if(attr(model, "model") %in% pkg.env$sb.plsicox){
aux <- model$list_pls_models[[b]]
}else if(attr(model, "model") %in% pkg.env$sb.splsdrcox){
aux <- model$list_spls_models[[b]]
}
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
for(c in comp){
if(ncol(aux$X$W.star)>=c){
rn <- rownames(aux$X$W.star[aux$X$W.star[,c]!=0,c,drop=F])
vars[[c]] <- rownames(aux$X$W.star[rn,,drop=F])[order(abs(aux$X$W.star[rn,c]), decreasing = T)][1:min(top, length(rn))]
}else{
break
}
}else if(attr(model, "model") %in% c(pkg.env$mb.splsdrcox, pkg.env$mb.splsdacox)){
for(c in comp){
if(ncol(model$X$W.star[[b]])>=c){
rn <- rownames(model$X$W.star[[b]][model$X$W.star[[b]][,c]!=0,c,drop=F])
vars[[c]] <- rownames(model$X$W.star[[b]][rn,,drop=F])[order(abs(model$X$W.star[[b]][rn,c]), decreasing = T)][1:min(top, length(rn))]
}else{
break
}
names(vars) <- as.character(1:length(vars))
lst_vars[[b]] <- vars
}
lst_vars
vars
b
names(model$X$data)
model$X$data
model
model <- lst_models$`SB.PLS-ICOX`
if(all(is.na(model$survival_model))){
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
lst_vars <- list()
for(b in names(model$X$data)){
vars <- list()
vars_data <- list()
if(attr(model, "model") %in% pkg.env$sb.plsicox){
aux <- model$list_pls_models[[b]]
}else if(attr(model, "model") %in% pkg.env$sb.splsdrcox){
aux <- model$list_spls_models[[b]]
}
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
for(c in comp){
if(ncol(aux$X$W.star)>=c){
rn <- rownames(aux$X$W.star[aux$X$W.star[,c]!=0,c,drop=F])
vars[[c]] <- rownames(aux$X$W.star[rn,,drop=F])[order(abs(aux$X$W.star[rn,c]), decreasing = T)][1:min(top, length(rn))]
}else{
break
}
}else if(attr(model, "model") %in% c(pkg.env$mb.splsdrcox, pkg.env$mb.splsdacox)){
for(c in comp){
if(ncol(model$X$W.star[[b]])>=c){
rn <- rownames(model$X$W.star[[b]][model$X$W.star[[b]][,c]!=0,c,drop=F])
vars[[c]] <- rownames(model$X$W.star[[b]][rn,,drop=F])[order(abs(model$X$W.star[[b]][rn,c]), decreasing = T)][1:min(top, length(rn))]
}else{
break
}
names(vars) <- as.character(1:length(vars))
lst_vars[[b]] <- vars
}
lst_vars
#select original or scale data - top X of each component, takes all of them
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
unique_vars <- deleteIllegalChars(unique(unlist(vars)))
if(ori_data){
vars_data <- as.data.frame(model$X_input[rownames(model$X$data),unique_vars,drop=F])
}else{
vars_data <- as.data.frame(model$X$data[,unique_vars,drop=F])
}
}else{
vars_data <- list()
for(b in names(model$X$data)){
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
if(ori_data){
vars_data[[b]] <- as.data.frame(model$X_input[[b]][rownames(model$X$data[[b]]),unique_vars,drop=F])
}else{
vars_data[[b]] <- as.data.frame(model$X$data[[b]][,unique_vars,drop=F])
}
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
names_qual <- apply(vars_data, 2, function(x){all(x %in% c(0,1))})
vars_qual <- vars_data[,names_qual,drop=F]
vars_num <- vars_data[,!names_qual,drop=F]
if(all(dim(vars_qual)>0)){
for(cn in colnames(vars_qual)){vars_qual[,cn] <- factor(vars_qual[,cn], levels = c(0, 1))}
info_logrank_qual <- getLogRank_QualVariables(data = vars_qual, sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL)
}else{
info_logrank_qual = NULL
}
if(all(dim(vars_num)>0)){
info_logrank_num <- getLogRank_NumVariables(data = vars_num, sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num <- NULL
}
}else{
info_logrank_qual <- list()
info_logrank_num <- list()
vars_qual <- list()
vars_num <- list()
for(b in names(model$X$data)){
names_qual <- apply(vars_data[[b]], 2, function(x){all(x %in% c(0,1))})
vars_qual[[b]] <- vars_data[[b]][,names_qual,drop=F]
vars_num[[b]] <- vars_data[[b]][,!names_qual,drop=F]
if(all(dim(vars_qual[[b]]))>0){
for(cn in colnames(vars_qual[[b]])){vars_qual[[b]][,cn] <- factor(vars_qual[[b]][,cn], levels = c(0, 1))}
info_logrank_qual[[b]] <- getLogRank_QualVariables(data = vars_qual[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL)
}else{
info_logrank_qual[[b]] = NULL
}
if(all(dim(vars_num[[b]]))>0){
info_logrank_num[[b]] <- getLogRank_NumVariables(data = vars_num[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num[[b]] <- NULL
}
devtools::load_all(".")
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_VAR)
LST_KM_TEST_VAR <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "VAR",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
X_test
#### ### ### ### ###
#Set Train and Test#
#### ### ### ### ###
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
if(data_type %in% c("3","MO")){
X_train <- list()
X_test <- list()
for(omic in names(X)){
X[[omic]] <- X[[omic]][rownames(Y),]
X_train[[omic]] <- X[[omic]][index_train,]
X_test[[omic]] <- X[[omic]][-index_train,]
}
Y_train <- Y[index_train,]
Y_test <- Y[-index_train,]
}else{
X <- X[rownames(Y),]
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
}
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_VAR)
LST_KM_TEST_VAR <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "VAR",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
LST_KM_TEST_VAR$`SB.PLS-ICOX`$genes$UTP18
lst_ggp$UTP18
lst_evaluation_plot <- plot_evaluation.list(eval_results)
lst_evaluation_plot$survivalROC
lst_evaluation_plot$survivalROC$lst_plots$lineplot.mean
lst_evaluation_plot$risksetROC$lst_plots$lineplot.mean
density.plots.lp$`SB.PLS-ICOX`$plot.density
LST_KM_RES_LP$`SB.PLS-ICOX`$LST_PLOTS$LP
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
LST_KM_TEST_LP <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "LP",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
lst_cutoff
type = "LP"
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(type == "COMP"){
if(all(unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods))){
sub_lst_models <- lst_models
}else{
sub_lst_models <- lst_models[unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods)]
if(verbose){
message(paste0("Model ", paste0(names(lst_models[!unlist(purrr::map(lst_models, function(x){x$class})) %in% c(pkg.env$pls_methods, pkg.env$multiblock_methods)]), collapse = ", "), " are not based in PLS methodology. Other models computed."))
}
}else{
sub_lst_models <- lst_models
}
if(!length(sub_lst_models) == length(lst_cutoff) & !length(lst_cutoff) == 1){
stop("List of models and list of cutoff must have the same length or list of cutoff must be just one value.")
}
LST_GGP <- NULL
LST_GGP <- purrr::map2(.x = sub_lst_models[4], .y = lst_cutoff[4], ~getTestKM(model = .x,
X_test = X_test, Y_test = Y_test,
cutoff = .y, type = type, ori_data = ori_data,
BREAKTIME = BREAKTIME, n.breaks = n.breaks, title = title))
model <- lst_models$`SB.PLS-ICOX`
cutoff <- lst_cutoff$`SB.PLS-ICOX`
cutoff
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(!is.numeric(cutoff)){
message("cutoff parameter must be numeric. Returning NA")
return(NA)
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
if(is.null(title)){
title = attr(model, "model")
}else{
title = paste0(attr(model, "model"), " - ", title)
}
#predict scores X_test
test_score <- predict(object = model, newdata = X_test)
#predict LP using scores
test_lp <- predict(model$survival_model$fit, newdata = as.data.frame(test_score))
if(is.na(cutoff[[cn]])){
message("Cutoff not found for LP")
next
}
cn
cutoff
is.na(cutoff)
if(is.na(cutoff)){
message("Cutoff not found for LP")
next
}
txt_greater <- paste0("greater than ", cutoff)
txt_lower <- paste0("lesser/equal than ", cutoff)
LP <- ifelse(test_lp>cutoff, txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
colnames(d) <- type
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = type,
name_data = NULL, title = title)[[type]]
ggp
devtools::load_all(".")
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
LST_KM_TEST_LP <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "LP",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_COMP)
LST_KM_TEST_COMP <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "COMP",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_VAR)
LST_KM_TEST_VAR <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
type = "VAR",
BREAKTIME = NULL, n.breaks = 20, title = "Test Data",
lst_cutoff = lst_cutoff)
save.image("C:/Users/pedro/Desktop/MB_test.RData")
devtools::load_all(".")
check()
devtools::load_all(".")
