pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
X_train[,1]
deleteZeroVarianceVariables(X_train[,1])
deleteZeroVarianceVariables(X_train)
deleteZeroVarianceVariables(X_train, info = T)
cv.plsicox_res$nzv
X = X_train
Y = Y_train
t1 <- Sys.time()
#### ### ###
# WARNINGS #
#### ### ###
#Check evaluator installed:
checkLibraryEvaluator(pred.method)
#### REQUIREMENTS
checkY.colnames(Y)
check.cv.weights(c(w_AIC, w_c.index, w_AUC))
max.ncomp <- check.ncomp(X, max.ncomp)
# if(!pred.method %in% c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I")){
#   stop_quietly(paste0("pred.method must be one of the following: ", paste0(c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I"), collapse = ", ")))
# }
if(!pred.method %in% pkg.env$AUC_evaluators){
stop_quietly(paste0("pred.method must be one of the following: ", paste0(pkg.env$AUC_evaluators, collapse = ", ")))
}
#### MAX PREDICTORS
max.ncomp <- check.maxPredictors(X, Y, MIN_EPV, max.ncomp)
#### REQUIREMENTS
lst_dnz <- deleteZeroOrNearZeroVariance(X = X,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
freqCut = 95/5)
X <- lst_dnz$X
variablesDeleted <- lst_dnz$variablesDeleted
variablesDeleted
lst_dnz
devtools::load_all(".")
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
cv.plsicox_res$nzv
devtools::load_all(".")
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
cv.plsicox_res$best_model_info
set.seed(seed)
lst_data <- splitData_Iterations_Folds(X, Y, n_run = n_run, k_folds = k_folds) #FOR TEST
lst_X_train <- lst_data$lst_X_train
lst_Y_train <- lst_data$lst_Y_train
lst_X_test <- lst_data$lst_X_test
lst_Y_test <- lst_data$lst_Y_test
t1 <- Sys.time()
remove_variance_at_fold_level
remove_variance_at_fold_level = T
t1 <- Sys.time()
comp_model_lst <- get_HDCOX_models2.0(method = pkg.env$plsicox,
lst_X_train = lst_X_train, lst_Y_train = lst_Y_train,
max.ncomp = max.ncomp, eta.list = NULL, EN.alpha.list = NULL, n_run = n_run, k_folds = k_folds,
x.center = x.center, x.scale = x.scale, y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = ifelse(remove_variance_at_fold_level,T,F), remove_zero_variance = ifelse(remove_variance_at_fold_level,T,F), toKeep.zv = NULL,
remove_non_significant = remove_non_significant,
total_models = total_models, tol = tol, PARALLEL = PARALLEL, verbose = verbose)
t1 <- Sys.time()
#### ### ###
# WARNINGS #
#### ### ###
#Check evaluator installed:
checkLibraryEvaluator(pred.method)
#### REQUIREMENTS
checkY.colnames(Y)
check.cv.weights(c(w_AIC, w_c.index, w_AUC))
max.ncomp <- check.ncomp(X, max.ncomp)
# if(!pred.method %in% c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I")){
#   stop_quietly(paste0("pred.method must be one of the following: ", paste0(c("risksetROC", "survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I"), collapse = ", ")))
# }
if(!pred.method %in% pkg.env$AUC_evaluators){
stop_quietly(paste0("pred.method must be one of the following: ", paste0(pkg.env$AUC_evaluators, collapse = ", ")))
}
#### MAX PREDICTORS
max.ncomp <- check.maxPredictors(X, Y, MIN_EPV, max.ncomp)
#### REQUIREMENTS
if(!remove_variance_at_fold_level){
lst_dnz <- deleteZeroOrNearZeroVariance(X = X,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
freqCut = 95/5)
X <- lst_dnz$X
variablesDeleted <- lst_dnz$variablesDeleted
}else{
variablesDeleted <- NULL
}
total_models <- 1 * k_folds * n_run #with greatest component we have all of them
t1 <- Sys.time()
comp_model_lst <- get_HDCOX_models2.0(method = pkg.env$plsicox,
lst_X_train = lst_X_train, lst_Y_train = lst_Y_train,
max.ncomp = max.ncomp, eta.list = NULL, EN.alpha.list = NULL, n_run = n_run, k_folds = k_folds,
x.center = x.center, x.scale = x.scale, y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = ifelse(remove_variance_at_fold_level,T,F), remove_zero_variance = ifelse(remove_variance_at_fold_level,T,F), toKeep.zv = NULL,
remove_non_significant = remove_non_significant,
total_models = total_models, tol = tol, PARALLEL = PARALLEL, verbose = verbose)
t2 <- Sys.time()
t2-t1
ifelse(remove_variance_at_fold_level,T,F)
method = pkg.env$plsicox
eta.list = NULL
EN.alpha.list = NULL
remove_near_zero_variance = ifelse(remove_variance_at_fold_level,T,F)
remove_zero_variance = ifelse(remove_variance_at_fold_level,T,F)
toKeep.zv = NULL
comp_model_lst <- list()
fold_list <- list()
run_list <- list()
eta_model_lst <- NULL
info <- NULL # for sPLS
## CHECK METHOD
if(is.null(eta.list) & is.null(EN.alpha.list) & !method %in% c(pkg.env$plsicox, pkg.env$splsdacox_mixomics, pkg.env$splsdrcox_mixomics, pkg.env$sb.plsicox, pkg.env$mb.splsdrcox, pkg.env$mb.splsdacox)){
stop_quietly("Method must be one of 'PLS-ICOX', 'sPLS-DACOX-MixOmics', 'MB.sPLS-DACOX' or 'sPLS-DRCOX-MixOmics' if 'eta.list' and 'EN.alpha.list' is NULL.")
}else if(!is.null(eta.list) & is.null(EN.alpha.list)  & !method %in% c(pkg.env$splsdrcox, pkg.env$sb.splsdrcox)){
stop_quietly("Method must be 'sPLS-DRCOX' if 'eta.list' is not NULL.")
}else if(!is.null(EN.alpha.list) & !method %in% c(pkg.env$coxEN)){
stop_quietly("Method must be 'coxEN' if 'EN.alpha.list' is not NULL.")
}
# if(method==pkg.env$splsdrcox){
#   if(is.null(n_run.mixOmics)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'n_run.mixOmics' cannot be NULL.")
#   }
#   if(is.null(k_folds.mixOmics)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'k_folds.mixOmics' cannot be NULL.")
#   }
#   if(is.null(test.keepX)){
#     stop_quietly("For method 'sPLS-DRCOX-MixOmics', parameter 'test.keepX' cannot be NULL.")
#   }
# }
pb_text <- "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated remaining time: :eta]"
pb <- progress::progress_bar$new(format = pb_text,
total = total_models,
complete = "=",   # Caracteres de las iteraciones finalizadas
incomplete = "-", # Caracteres de las iteraciones no finalizadas
current = ">",    # Caracter actual
clear = FALSE,    # Si TRUE, borra la barra cuando termine
width = 100)      # Ancho de la barra de progreso
message(paste0("Training all possible models for ", method, "..."))
pb$tick(0)
#### ### ### ### ### ### #
# UPDATING GLOBALS SIZE #
#### ### ### ### ### ### #
MB = 4000
bytes = MB*1024^2
options(future.globals.maxSize = bytes)
#### ### ### ### #
# COMP-REP-FOLDS #
#function to compute all models at the same time - just last component
lst_inputs <- list()
cont = 1
lst_names = NULL
for(i in max.ncomp){
for(r in 1:n_run){
for(f in 1:k_folds){
lst_inputs[[cont]] = list()
lst_inputs[[cont]]$comp = i
lst_inputs[[cont]]$run <- r
lst_inputs[[cont]]$fold <- f
lst_names <- c(lst_names, paste0(i, "_", r, "_", f))
cont = cont + 1
}
names(lst_inputs) <- lst_names
remove_near_zero_variance
remove_zero_variance
lst_all_models <- purrr::map(lst_inputs, ~plsicox(X = data.matrix(lst_X_train[[.$run]][[.$fold]]),
Y = data.matrix(lst_Y_train[[.$run]][[.$fold]]),
n.comp = .$comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_near_zero_variance = remove_near_zero_variance, remove_zero_variance = remove_zero_variance, toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant, tol = tol, alpha = alpha,
returnData = returnData))
lst_all_models$`6_1_1`$nzv
lst_all_models$`6_2_1`$nzv
lst_all_models$`6_3_1`$nzv
lst_all_models$`6_4_1`$nzv
lst_all_models$`6_5_1`$nzv
lst_all_models$`6_1_2`$nzv
lst_all_models$`6_1_3`$nzv
lst_all_models$`6_1_4`$nzv
lst_all_models$`6_1_5`$nzv
lst_all_models$`6_1_6`$nzv
lst_all_models$`6_1_7`$nzv
lst_all_models$`6_1_8`$nzv
lst_all_models$`6_1_9`$nzv
lst_all_models$`6_1_10`$nzv
lst_all_models$`6_1_1`$X$data[,1]
table(lst_all_models$`6_1_1`$X$data[,1])
104/18
95/5
table(lst_all_models$`6_1_1`$X$data[,2])
table(lst_all_models$`6_1_1`$X$data[,3])
table(lst_all_models$`6_1_1`$X$data[,4])
table(lst_all_models$`6_1_1`$X$data[,5])
table(lst_all_models$`6_1_1`$X$data[,6])
table(lst_all_models$`6_1_1`$X$data[,4])
98/20
90/10
84/38
7/3
104/37
2+2
104/18
90/32
apply(lst_all_models$`6_1_1`$X, 2, table)
apply(lst_all_models$`6_1_1`$X, 2, function(x){table(x)})
apply(lst_all_models$`6_1_1`$X$data, 2, function(x){table(x)})
104/18
90/32
84/38
98/20
90/32
70/30
80/20
90/10
85/15
devtools::load_all(".")
comp_model_lst <- get_HDCOX_models2.0(method = pkg.env$plsicox,
lst_X_train = lst_X_train, lst_Y_train = lst_Y_train,
max.ncomp = max.ncomp, eta.list = NULL, EN.alpha.list = NULL, n_run = n_run, k_folds = k_folds,
x.center = x.center, x.scale = x.scale, y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = ifelse(remove_variance_at_fold_level,T,F), remove_zero_variance = ifelse(remove_variance_at_fold_level,T,F), toKeep.zv = NULL,
remove_non_significant = remove_non_significant,
total_models = total_models, tol = tol, PARALLEL = PARALLEL, verbose = verbose)
devtools::load_all(".")
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose)
remove_non_significant_models
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, eta.list = eta.list,
n_run = n_run, k_folds = k_folds,
alpha = alpha,
remove_non_significant_models = remove_non_significant_models, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
# METHODS
lst_evaluations <- c("survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I", "risksetROC")
names(lst_evaluations) <- lst_evaluations
# Classical
FLAG_COX = T
FLAG_COXSW = T
# hd
FLAG_COXEN = T
FLAG_PLSICOX = T
FLAG_sPLSDRCOX = T
FLAG_sPLSDRCOX_MO = T
FLAG_sPLSDACOX_MO = T
# mo
FLAG_SB.PLSICOX = F
FLAG_FAST.SB.PLSICOX = F
FLAG_SB.sPLSDRCOX = F
FLAG_FAST.SB.sPLSDRCOX = F
FLAG_MB.sPLSDRCOX = F
FLAG_MB.sPLSDACOX = F
# Scale Parameters
x.center = T
x.scale = T
y.center = F
y.scale = F
# Survival Parameters
MIN_EPV = 5
pred.attr = "mean"
# Algorithm Parameters
remove_non_significant = T
remove_non_significant_models = F
remove_near_zero_variance = T
remove_zero_variance = F
toKeep.zv = NULL
alpha = 0.05
returnData = T
verbose = T
PARALLEL = T
# cox
FORCE = T
# SW
boostDeletion = F
BACKWARDS = T
initialModel = "NULL"
toKeep.sw = NULL
alpha_ENT = 0.1
alpha_OUT = 0.15
alpha_PH  = 0.05
check_PH = F
# coxEN
EN.alpha.list = seq(0,1,0.1)
# PLS
max.ncomp = 10
max.iter = 500
tol = 1e-15
# Cross Validation Parameters
times = NULL
return_models = F
seed = 123
# Weights Parameters
w_AIC = 0
w_c.index = 0
w_AUC = 1
# sPLS-DR-cox
eta.list = seq(0,0.9,0.25)
# mixOmics
vector = NULL
MIN_NVAR = 10
MAX_NVAR = 1000
n.cut_points = 5
EVAL_METHOD = "cenROC"
# Eval stop detection
MIN_AUC_INCREASE = 0.01 # 1%
MIN_AUC = 0.75 # 75%
MIN_COMP_TO_CHECK = 3
# Model Lists
lst_models_full <- NULL
lst_models <- NULL
lst_models_pls <- NULL
# Evaluation multiple models
max_time_points = 15
#### ### ### #### ### ### ###
#Cross Validation Parameters #
#### ### ### ### ### #### ###
n_run = 5
k_folds = 10
fast_mode = F
pred.method = "cenROC"
#### ### ### ### ###
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, eta.list = eta.list,
n_run = n_run, k_folds = k_folds,
alpha = alpha,
remove_non_significant_models = remove_non_significant_models, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
rownames(cv.coxEN_res$lst_models$alpha_0$run_1$fold_1$X)
rownames(cv.coxEN_res$lst_models$alpha_0$run_1$fold_1$X$data)
rownames(cv.splsdrcox_res$lst_models$alpha_0$run_1$fold_1$X$data)
return_models
return_models = T
cv.splsdrcox_res$time
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = max.ncomp, eta.list = eta.list,
n_run = n_run, k_folds = k_folds,
alpha = alpha,
remove_non_significant_models = remove_non_significant_models, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL, tol = tol,
verbose = verbose, returnData = T)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$data)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$weightings)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$W.star)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$loadings)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$scores)
rownames(cv.coxEN_res$lst_models$alpha_0$run_1$fold_1$X$data)
dim(X_train)
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = EN.alpha.list, #EN penalization
max.variables = ncol(X_train),
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
rownames(cv.coxEN_res$lst_models$alpha_0$run_1$fold_1$X$data)
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = EN.alpha.list, #EN penalization
max.variables = ncol(X_train),
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose, returnData = T)
rownames(cv.coxEN_res$lst_models$alpha_0$run_1$fold_1$X$data)
rownames(cv.splsdrcox_res$lst_models$comp_1$eta_0$run_1$fold_1$X$scores)
devtools::load_all(".")
check()
load("D:/Pedro/Mega/Doctorado/Otros proyectos/plsRcox/results/GSE49997_CLINICAL_COMPLETE_cenROC_runs_5_folds_10_2023-01-25/lst_models.RData")
lst_forest_plot <- plot_forest.list(lst_models = lst_models)
library(devtools)
devtools::load_all(".")
lst_forest_plot <- plot_forest.list(lst_models = lst_models)
lst_forest_plot$coxSW
lst_forest_plot$cox
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models = lst_models)
lst_ph_ggplot$cox
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.risk <- plot_cox.event.list(lst_models, type = "risk")
density.plots.expected <- plot_cox.event.list(lst_models, type = "expected")
density.plots.survival <- plot_cox.event.list(lst_models, type = "survival")
ggp_density.event <- plot_events(Y = Y,
categories = c("Censored","Death"), #name for FALSE/0 (Censored) and TRUE/1 (Event)
y.text = "Number of observations",
roundTo = 0.5,
max.breaks = 15)
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models_pls,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3, verbose = F)
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3, verbose = F)
ggp.simulated_beta$`sPLS-DRCOX`$plot
lst_models$`sPLS-DRCOX`
dpi = 125
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dpi=dpi,
fig.retina=1,
fig.width=1440/dpi, #4:3 FHD
fig.height=1080/dpi,
out.width="100%",
crop = NULL,
warning = T,
error = T
)
rm(dpi)
load("C:/Users/pedro/Desktop/vignette.RData")
knitr::kable(Y_test[1:5,])
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
devtools::load_all(".")
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$`sPLS-DRCOX-MixOmics`$plot
lst_cox.comparison$`COX-EN`
