robust = T,
nocenter = rep(1, ncol(d[,1:h,drop=F])),
model=T)
},
# Specifying error message
error = function(e){
message(e$message)
invisible(gc())
return(NA)
}
)
# keep at least one component
while(all(is.na(aux)) & h>1){
h <- h-1
aux <- tryCatch(
# Specifying expression
expr = {
survival::coxph(formula = survival::Surv(time,event) ~ .,
data = d[,1:h,drop=F],
ties = "efron",
singular.ok = T,
robust = T,
nocenter = rep(1, ncol(d[,1:h,drop=F])),
model=T)
},
# Specifying error message
error = function(e){
if(verbose){
message(e$message)
}
invisible(gc())
return(NA)
}
)
}
#RETURN a MODEL with ALL significant Variables from complete, deleting one by one in backward method
removed_variables <- NULL
if(remove_non_significant){
if(all(c("time", "event") %in% colnames(d))){
lst_rnsc <- removeNonSignificativeCox(cox = aux, alpha = alpha, cox_input = d, time.value = NULL, event.value = NULL)
}else{
lst_rnsc <- removeNonSignificativeCox(cox = aux, alpha = alpha, cox_input = cbind(d, Yh), time.value = NULL, event.value = NULL)
}
aux <- lst_rnsc$cox
removed_variables <- lst_rnsc$removed_variables
}
cox_model <- NULL
cox_model$fit <- aux
#we cannot compute all components
if(h != n.comp & !all(is.na(cox_model$fit))){
if(verbose){
message(paste0("Model cannot be computed for all components. Final model select ", h," components instead of ", n.comp,"."))
}
#update all values
W <- W[,1:h,drop=F]
W_norm = W_norm[,1:h,drop=F]
P = P[,1:h,drop=F]
Ts = Ts[,1:h,drop=F]
E = E[1:h]
n.comp = ncol(Ts)
}
survival_model = NULL
if(!length(cox_model$fit) == 1){
survival_model <- getInfoCoxModel(cox_model$fit)
}
if(is.null(P) | is.null(W)){
message("PLS-ICOX model cannot be computed because P or W vectors are NULL. Returning NA.")
invisible(gc())
return(NA)
}
#W.star
#sometimes solve(t(P) %*% W)
#system is computationally singular: reciprocal condition number = 6.24697e-18
#W.star
#sometimes solve(t(P) %*% W)
#system is computationally singular: reciprocal condition number = 6.24697e-18
PW <- tryCatch(expr = {solve(t(P) %*% W, tol = tol)},
error = function(e){
if(verbose){
message(e$message)
}
NA
})
if(all(is.na(PW))){
message("PLS-ICOX model cannot be computed due to solve(t(P) %*% W). Reduce 'tol' parameter to fix it. Returning NA.")
invisible(gc())
return(NA)
}
PW
P
W
solve(t(P) %*% W)
# What happen when you cannot compute W.star but you have P and W?
W.star <- W %*% PW
W.star
PW
P
t(P) %*% W
P %*% W
W
head(P)
head(W)
solve(t(P) %*% W)
head(W)
W.star2 <- W %*% solve(t(P) %*% W)
head(W.star)
head(W.star2)
head(W)
head(PW)
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
tol = 500,
MIN_EPV = 5, returnData = T, verbose = T)
devtools::load_all(".")
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
tol = 500,
MIN_EPV = 5, returnData = T, verbose = F)
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
plsicox_model
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX-MixOmics" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = NULL, max_time_points = 15,
PARALLEL = T)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = T))
eval_results
#eval_results$cenROC
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model)
ggp_time <- plot_time.list(lst_models_time)
ggp_time
lst_forest_plot <- plot_forest.list(lst_models)
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`sPLS-DRCOX-MixOmics`
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
class(LST_KM_RES_LP)
LST_KM_RES_LP$`COX-EN`
X_test
nt <- predict(lst_models$`PLS-ICOX`, newdata = X_test)
nt
test_score <- predict(lst_models$`PLS-ICOX`, newdata = X_test)
test_lp <- predict(lst_models$`PLS-ICOX`$survival_model$fit, newdata = test_score)
class(test_score)
test_lp <- predict(lst_models$`PLS-ICOX`$survival_model$fit, newdata = as.data.frame(test_score))
test_lp
LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_numASqual$LP
LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest
new_factor <- ifelse(test_lp>LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest$Cutoff, T, F)
new_factor
table(new_factor)
new_factor
plot_survivalplot.qual(data = new_factor,
sdata = data.frame(Y_test),
BREAKTIME = 5,
cn_variables = "LP",
name_data = NULL, title = NULL)
plot_survivalplot.qual
new_factor
as.data.frame(new_factor)
plot_survivalplot.qual(data = as.data.frame(new_factor),
sdata = data.frame(Y_test),
BREAKTIME = 5,
cn_variables = "new_factor",
name_data = NULL, title = NULL)
Y_test
plot_survivalplot.qual(data = as.data.frame(new_factor),
sdata = data.frame(Y_test),
BREAKTIME = 15,
cn_variables = "new_factor",
name_data = NULL, title = NULL)
new_factor
new_factor <- factor(new_factor)
plot_survivalplot.qual(data = as.data.frame(new_factor),
sdata = data.frame(Y_test),
BREAKTIME = 15,
cn_variables = "new_factor",
name_data = NULL, title = NULL)
plot_survivalplot.qual
ggp <- plot_survivalplot.qual(data = as.data.frame(new_factor),
sdata = data.frame(Y_test),
BREAKTIME = 15,
cn_variables = "new_factor",
name_data = NULL, title = NULL)
ggp
ggp <- plot_survivalplot.qual(data = as.data.frame(new_factor),
sdata = data.frame(Y_test),
BREAKTIME = 100,
cn_variables = "new_factor",
name_data = NULL, title = NULL)
ggp
LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest$Cutoff
txt_greater <- paste0("greater than ", LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest$Cutoff)
txt_lower <- paste0("lesser/equal than ", LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest$Cutoff)
LP <- ifelse(test_lp>LST_KM_RES_LP$`PLS-ICOX`$info_logrank_num$df_nvar_lrtest$Cutoff, txt_greater, txt_lower)
LP <- factor(LP)
ggp <- plot_survivalplot.qual(data = as.data.frame(LP),
sdata = data.frame(Y_test),
BREAKTIME = 100,
cn_variables = "LP",
name_data = NULL, title = NULL)
ggp
test_score <- predict(lst_models$`sPLS-DRCOX-MixOmics`, newdata = X_test)
test_lp <- predict(lst_models$`sPLS-DRCOX-MixOmics`$survival_model$fit, newdata = as.data.frame(test_score))
txt_greater <- paste0("greater than ", LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
txt_lower <- paste0("lesser/equal than ", LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
LP <- ifelse(test_lp>LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff, txt_greater, txt_lower)
LP <- factor(LP)
ggp <- plot_survivalplot.qual(data = as.data.frame(LP),
sdata = data.frame(Y_test),
BREAKTIME = 100,
cn_variables = "LP",
name_data = NULL, title = NULL)
ggp
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
var_name = "LP"
cutoff = LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff
model = lst_models$`PLS-ICOX`
n.breaks = 20
if(!is.numeric(cutoff)){
stop("cutoff parameter must be numeric.")
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
BREAKTIME = NULL
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
#predict scores X_test
test_score <- predict(model, newdata = X_test)
#predict LP using scores
test_lp <- predict(model$survival_model$fit, newdata = as.data.frame(test_score))
#create new variable
txt_greater <- paste0("greater than ", cutoff)
txt_lower <- paste0("lesser/equal than ", cutoff)
LP <- ifelse(test_lp>cutoff, txt_greater, txt_lower)
LP <- factor(LP)
d <- data = as.data.frame(LP)
d <- as.data.frame(LP)
colnames(d) <- var_name
var_name
d
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = var_name,
name_data = NULL, title = NULL)
ggp
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = var_name,
name_data = NULL, title = NULL)$LP
ggp
getTestKM <- function(model, X_test, Y_test, cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!is.numeric(cutoff)){
stop("cutoff parameter must be numeric.")
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
#predict scores X_test
test_score <- predict(model, newdata = X_test)
#predict LP using scores
test_lp <- predict(model$survival_model$fit, newdata = as.data.frame(test_score))
#create new variable
txt_greater <- paste0("greater than ", cutoff)
txt_lower <- paste0("lesser/equal than ", cutoff)
LP <- ifelse(test_lp>cutoff, txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
colnames(d) <- var_name
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = var_name,
name_data = NULL, title = NULL)$LP
return(ggp)
}
getTestKM(model = lst_models$`sPLS-DRCOX-MixOmics`,
X_test = X_test, Y_test = Y_test,
cutoff = LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
getTestKM(model = lst_models$`sPLS-DRCOX-MixOmics`,
X_test = X_test, Y_test = Y_test,
cutoff = LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
getTestKM(model = lst_models$`sPLS-DRCOX-MixOmics`,
X_test = X_test, Y_test = Y_test,
cutoff = 0)
getTestKM(model = lst_models$`sPLS-DRCOX-MixOmics`,
X_test = X_test, Y_test = Y_test,
cutoff = LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
cutoff
cutoff = 0
LST_GGP <- purrr::map(lst_models, ~getTestKM(model = .,
X_test = X_test, Y_test = Y_test,
cutoff = cutoff, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
LST_GGP$`COX-EN`
LST_GGP$`PLS-ICOX`
LST_GGP$`sPLS-DRCOX`
LST_GGP$`sPLS-DRCOX-MixOmics`
LST_GGP$`sPLS-DACOX-MixOmics`
?purrr::map2
lst_cutoff
lst_cutoff = 0
getTestKM.list <- function(lst_models, X_test, Y_test, lst_cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!length(lst_models) == length(lst_cutoff) | !length(lst_cutoff) == 1){
stop("List of models and list of cutoff must have the same length or list of cutoff must be just one value.")
}
LST_GGP <- NULL
if(length(lst_cutoff)==1){
LST_GGP <- purrr::map(lst_models, ~getTestKM(model = .,
X_test = X_test, Y_test = Y_test,
cutoff = lst_cutoff, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}else{
LST_GGP <- purrr::map2(.x = lst_models, .y = lst_cutoff, ~getTestKM(model = .x,
X_test = X_test, Y_test = Y_test,
cutoff = .y, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}
return(LST_GGP)
}
getTestKM <- function(model, X_test, Y_test, cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!is.numeric(cutoff)){
stop("cutoff parameter must be numeric.")
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
#predict scores X_test
test_score <- predict(model, newdata = X_test)
#predict LP using scores
test_lp <- predict(model$survival_model$fit, newdata = as.data.frame(test_score))
#create new variable
txt_greater <- paste0("greater than ", cutoff)
txt_lower <- paste0("lesser/equal than ", cutoff)
LP <- ifelse(test_lp>cutoff, txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
colnames(d) <- var_name
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = var_name,
name_data = NULL, title = NULL)$LP
return(ggp)
}
lst_ggp <- getTestKM.list(model = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
cutoff = 0)
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
cutoff = 0)
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
lst_cutoff = 0)
lst_cutoff
!length(lst_models) == length(lst_cutoff)
getTestKM.list <- function(lst_models, X_test, Y_test, lst_cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!length(lst_models) == length(lst_cutoff) & !length(lst_cutoff) == 1){
stop("List of models and list of cutoff must have the same length or list of cutoff must be just one value.")
}
LST_GGP <- NULL
if(length(lst_cutoff)==1){
LST_GGP <- purrr::map(lst_models, ~getTestKM(model = .,
X_test = X_test, Y_test = Y_test,
cutoff = lst_cutoff, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}else{
LST_GGP <- purrr::map2(.x = lst_models, .y = lst_cutoff, ~getTestKM(model = .x,
X_test = X_test, Y_test = Y_test,
cutoff = .y, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}
return(LST_GGP)
}
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
lst_cutoff = 0)
lst_ggp$`COX-EN`
lst_results = LST_KM_RES_LP
result <- lst_results$`COX-EN`
getCutoffAutoKM <- function(result){
return(result$info_logrank_num$df_nvar_lrtest$Cutoff)
}
LST_RES <- purrr::map(lst_results, ~getCutoffAutoKM(.))
LST_RES
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
getTestKM.list <- function(lst_models, X_test, Y_test, lst_cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!length(lst_models) == length(lst_cutoff) & !length(lst_cutoff) == 1){
stop("List of models and list of cutoff must have the same length or list of cutoff must be just one value.")
}
LST_GGP <- NULL
if(length(lst_cutoff)==1){
LST_GGP <- purrr::map(lst_models, ~getTestKM(model = .,
X_test = X_test, Y_test = Y_test,
cutoff = lst_cutoff, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}else{
LST_GGP <- purrr::map2(.x = lst_models, .y = lst_cutoff, ~getTestKM(model = .x,
X_test = X_test, Y_test = Y_test,
cutoff = .y, var_name = var_name,
BREAKTIME = BREAKTIME, n.breaks = n.breaks))
}
return(LST_GGP)
}
getTestKM <- function(model, X_test, Y_test, cutoff, var_name = "LP", BREAKTIME = NULL, n.breaks = 20){
if(!is.numeric(cutoff)){
stop("cutoff parameter must be numeric.")
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(Y_test[,"time"]) - min(Y_test[,"time"])) / n.breaks
}
#predict scores X_test
test_score <- predict(model, newdata = X_test)
#predict LP using scores
test_lp <- predict(model$survival_model$fit, newdata = as.data.frame(test_score))
#create new variable
txt_greater <- paste0("greater than ", cutoff)
txt_lower <- paste0("lesser/equal than ", cutoff)
LP <- ifelse(test_lp>cutoff, txt_greater, txt_lower)
LP <- factor(LP)
d <- as.data.frame(LP)
colnames(d) <- var_name
ggp <- plot_survivalplot.qual(d,
sdata = data.frame(Y_test),
BREAKTIME = BREAKTIME,
cn_variables = var_name,
name_data = NULL, title = NULL)$LP
return(ggp)
}
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
lst_cutoff = 0)
getCutoffAutoKM.list <- function(lst_results){
LST_RES <- purrr::map(lst_results, ~getCutoffAutoKM(.))
}
getCutoffAutoKM <- function(result){
return(result$info_logrank_num$df_nvar_lrtest$Cutoff)
}
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
lst_cutoff = 0)
ggp <- getTestKM(model = lst_models$`sPLS-DRCOX-MixOmics`,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
cutoff = LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$info_logrank_num$df_nvar_lrtest$Cutoff)
lst_cutoff
unlist(purrr::map(lst_results, ~getCutoffAutoKM(.)))
getCutoffAutoKM.list <- function(lst_results){
LST_RES <- unlist(purrr::map(lst_results, ~getCutoffAutoKM(.)))
}
getCutoffAutoKM <- function(result){
return(result$info_logrank_num$df_nvar_lrtest$Cutoff)
}
lst_cutoff <- getCutoffAutoKM.list(LST_KM_RES_LP)
lst_cutoff
lst_ggp <- getTestKM.list(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
BREAKTIME = NULL, n.breaks = 20,
lst_cutoff = lst_cutoff)
lst_ggp
