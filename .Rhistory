ggp_time
df.times
load_all()
ggp_time <- plot_time.models(lst_models_time)
ggp_time
eval_results
lst_times <- list()
for(m in names(lst_models)){
if(class(lst_models[[m]])==pkg.env$model_class){
lst_times[[m]] <- lst_models[[m]]$time
}else if(class(lst_models[[m]][[1]])==pkg.env$model_class){
eval_sum <- lst_models[[m]][[1]]$time
if(length(lst_models[[m]])>1){
for(i in 2:length(lst_models[[m]])){
eval_sum <- eval_sum + lst_models[[m]][[i]]$time
}
lst_times[[m]] <- eval_sum
}
lst_times
total_time <- lst_times[[1]]
if(length(lst_times)>1){
for(m in 2:length(lst_times)){
total_time <- total_time + lst_times[[m]]
}
lst_times$Total <- total_time
lst_times
df.times <- do.call(rbind.data.frame, lst_times)
colnames(df.times) <- "times"
df.times$method <- names(lst_times)
rownames(df.times) <- NULL
roundTo = 0
max.breaks = 10
if(roundTo == 0){
#select the decimals of Y
if(length(grep("\\.", df.times$times))>0){
ch <- gsub("\\.", "", as.character(min(Y$time)/max.breaks))
cont = 0
for(c in 1:nchar(ch)){
if(substr(ch,c,c) == "0"){
cont = cont + 1
}else{
break
}
roundTo = 1*10^-cont
}else{
roundTo = 0.1
}
breaks_size = round2any(max(df.times$times), roundTo, f = ceiling) / max.breaks
breaks = seq(0, max(df.times$times)+breaks_size, by=breaks_size)
accuracy <- roundTo
max <- max(breaks)
df.times$times <- round(df.times$times, digits = 4)
x.var = "method"
y.var = "times"
x.color = "method"
x.text = x.text
if(is.null(y.text)){
y.text = paste0("Time (",attr(lst_times[["total"]], "units"),")")
}
df.times$method <- factor(df.times$method, levels = df.times$method)
df.times
eval_results$time
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model,
eval_results)
ggp_time <- plot_time.models(lst_models_time)
ggp_time
lst_forest_plot <- purrr::map(lst_models, ~survminer::ggforest(.$survival_model$fit,
data = .$survival_model$fit$model))
lst_forest_plot$`SPLS-DRCOX`
ggp_time
lst_forest_plot$`sPLS-DRCOX`
lst_forest_plot$attr(model, "model")
attr(model, "model")
model <- splsdacox_mo_model
attr(model, "model")
pkg.env$model_class
pkg.env
pkg.env$all_methods
attr(model, "model") %in% pkg.env$all_methods
stop(paste0("Model must be one of the following HDcox models: ", paste0(pkg.env$all_methods, collapse = ", ")))
?survminer::ggforest
load-all()
load_all()
lst_forest_plot <- plot_forest.list(lst_models)
devtools::load_all(".")
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot <- plot_forest(lst_models$`COX-EN`)
devtools::load_all(".")
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot <- plot_forest(lst_models$`COX-EN`)
lst_forest_plot
lst_forest_plot <- plot_forest.list(lst_models)
devtools::load_all(".")
lst_forest_plot <- plot_forest.list(lst_models)
attr(model, "model")
!attr(model, "model") %in% pkg.env$all_methods
lst_models
lst_forest_plot <- plot_forest.list(lst_models[1])
title = "Hazard Ratio"
cpositions = c(0.02, 0.22, 0.4)
fontsize = 0.7
refLabel = "reference"
noDigits = 2
plot_forest(model = lst_models$`COX-EN`$survival_model$fit,
title = title, cpositions = cpositions,
fontsize = fontsize, refLabel = refLabel, noDigits = noDigits)
lst_forest_plot <- purrr::map(lst_models, ~plot_forest(model = .,
title = title, cpositions = cpositions,
fontsize = fontsize, refLabel = refLabel, noDigits = noDigits))
lst_forest_plot
title
lst_models$`COX-EN`$convergence_issue
pkg.env$cox
pkg.env$sb.splsdrcox
devtools::load_all(".")
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 6, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 8, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = T, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
coxen_model$class
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 1, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
tol = 500,
MIN_EPV = 5, returnData = T, verbose = F)
plsicox_model
plsicox_model$time
plsicox_model$class
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 1, eta = 0, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_model
splsdrcox_mo_model <- splsdrcox_mixOmics(X = X_train, Y = Y_train,
n.comp = 1, vector = 500,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 5,
MIN_AUC_INCREASE = 0.01,
EVAL_METHOD = "AUC", pred.method = "cenROC", max.iter = 200,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_mo_model
splsdacox_mo_model <- splsdacox_mixOmics(X = X_train, Y = Y_train,
n.comp = 2, vector = 500,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 5,
MIN_AUC_INCREASE = 0.01,
EVAL_METHOD = "AUC", pred.method = "cenROC", max.iter = 200,
MIN_EPV = 5, returnData = T, verbose = F)
splsdacox_mo_model
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = seq(1,4,0.5), max_time_points = 15,
PARALLEL = F)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = F))
eval_results
#eval_results$cenROC
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model,
eval_results)
ggp_time <- plot_time.models(lst_models_time)
ggp_time
lst_forest_plot <- plot_forest.list(lst_models[1])
devtools::load_all(".")
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot$`sPLS-DRCOX`
lst_forest_plot <- plot_forest.list(lst_models, noDigits = 3)
lst_forest_plot$`sPLS-DRCOX`
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.lp$`sPLS-DRCOX`$plot.density
density.plots.lp$`sPLS-DRCOX`$plot.histogram
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`sPLS-DRCOX`
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$t.test
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot.mean
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = seq(1,4,0.5), max_time_points = 15,
PARALLEL = F)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = F))
eval_results
#eval_results$cenROC
?plot_evaluation
lst_eval_results
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$anova
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$t.test
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
load_all()
check()
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX" = splsdacox_mo_model)
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX-MixOmics" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = seq(1,4,0.5), max_time_points = 15,
PARALLEL = F)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = F))
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot$`sPLS-DACOX-MixOmics`
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.lp$`sPLS-DACOX-MixOmics`$plot.density
density.plots.lp$`sPLS-DACOX-MixOmics`$plot.histogram
?HDcox::plot_cox.event.list
?HDcox::plot_cox.event.list()
?HDcox::plot_cox.event()
?coxph
?predict.coxph
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`sPLS-DACOX-MixOmics`
devtools::load_all(".")
check()
devtools::load_all(".")
check()
install()
devtools::load_all(".")
install()
library(devtools)
devtools::load_all(".")
# load HDcox
library(HDcox)
dpi = 125
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dpi=dpi,
fig.retina=1,
fig.width=1440/dpi, #4:3 FHD
fig.height=1080/dpi,
out.width="100%",
crop = NULL,
warning = T,
error = T
)
rm(dpi)
library(RColorConesa)
#theme_set(theme_colorConesa()) #under development
# load Tasic dataset
data("X_small_data_E.MTAB.386")
data("Y_small_data_E.MTAB.386")
X <- X_small_data_E.MTAB.386
Y <- Y_small_data_E.MTAB.386
rm(X_small_data_E.MTAB.386, Y_small_data_E.MTAB.386)
ggp_density.event <- plot_events(Y = Y,
categories = c("Censored","Death"), #name for FALSE/0 (Censored) and TRUE/1 (Event)
y.text = "Number of observations",
roundTo = 0.5,
max.breaks = 10)
ggp_density.event$plot
devtools::load_all(".")
ggp_density.event <- plot_events(Y = Y,
categories = c("Censored","Death"), #name for FALSE/0 (Censored) and TRUE/1 (Event)
y.text = "Number of observations",
roundTo = 0.5,
max.breaks = 10)
ggp_density.event$plot
set.seed(321)
index_train <- caret::createDataPartition(Y$event,
p = .9, #80% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #101x500
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #25x500
Y_test <- Y[-index_train,]
# classical approach
cox_model <- cox(X = X_train, Y = Y_train,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = T, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
MIN_EPV = 5, FORCE = F, returnData = T, verbose = T)
EPV <- getEPV(X_train, Y_train)
EPV
# run cv.coxEN
cv.coxen_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = seq(0,1,0.1),
max.variables = ncol(X_train),
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = F, verbose = F, seed = 123)
cv.coxen_res #1.5min.
# run cv.coxEN
cv.coxen_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = seq(0,1,0.1),
max.variables = ncol(X_train),
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.coxen_res
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 9, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 8, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = T, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
# run cv.plsicox
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = 10,
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0, w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.plsicox_res #3.7min.
cv.plsicox_res
cv.plsicox_res$time
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 1, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
tol = 500,
MIN_EPV = 5, returnData = T, verbose = F)
plsicox_model
plsicox_model$class
plsicox_model
# run cv.splsdrcox
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = 10, eta.list = seq(0,0.9,0.1), #penalty
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = F, verbose = F, seed = 123)
cv.splsdrcox_res #2min 40s.
cv.splsdrcox_res$time
cv.splsdrcox_res$plot_AUC
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 6, eta = 0.8, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_model
devtools::load_all(".")
getPvalFromCox(splsdrcox_model$survival_model$fit)
devtools::load_all(".")
check()
devtools::load_all(".")
check()
version()
version
library(installR)
library("installr")
install.packages('installr')
require(installr)
updateR()
# plot cv.plsicox
cv.splsdrcox_res$plot_AUC
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 6, eta = 0.8, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 6, eta = 0.8, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
devtools::load_all(".")
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 6, eta = 0.8, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_model
# run cv.splsdrcox
cv.splsdrcox_mo_res <- cv.splsdrcox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = 10, vector = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 10, EVAL_METHOD = "cenROC",
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = T, seed = 123)
version
save.image("C:/Users/pedro/Desktop/vignette.RData")
