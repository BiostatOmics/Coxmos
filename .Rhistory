}
error.bar
coeff.min
lp.new_pat_variable.min
names(coeff.min)
ggp.simulated_beta$sd.min
model$X$W.star$genes
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
ggp.simulated_beta$plot$clinical
onlySig
names(model$X$data)[names(model$X$data) %in% names(ggp.simulated_beta$plot)]$clinical
names(model$X$data)[names(model$X$data) %in% names(ggp.simulated_beta$plot)]
load_all()
ggp.simulated_beta_newPat <- plot_pseudobeta_newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
ggp.simulated_beta_newPat$`MB.sPLS-DACOX`$plot
ggp.simulated_beta_newPat$`SB.sPLS-DRCOX`$plot
pat_density <- plot_patient.eventDensity(patient = new_pat,
time = NULL,
model = lst_models$`SB.sPLS-DRCOX`,
type = "lp")
pat_density
pat_histogram <- plot_patient.eventHistogram(patient = new_pat,
time = NULL,
model = lst_models$`SB.sPLS-DRCOX`,
type = "lp")
pat_histogram
lst_cox.comparison <- plot_cox.comparePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
load_all()
ggp_scores <- plot_PLS_HDcox(model = lst_models$`SB.sPLS-DRCOX`,
comp = c(1,2), mode = "scores")
ggp_scores$plot_block
ggp_loadings <- plot_PLS_HDcox(model = lst_models$`SB.sPLS-DRCOX`,
comp = c(1,2), mode = "loadings",
top = 10) #length from 0,0
ggp_loadings$plot_block
model = lst_models$`SB.PLS-ICOX`
df.pat = X_test[1:5,]
X_test
sub_X_test <- list()
for(b in names(X_test)){
sub_X_test[[b]] <- X_test[[b]][1:5,]
}
sub_X_test
df.pat = sub_X_test
lst_cox.comparison <- plot_cox.comparePatients(model = lst_models$`SB.PLS-ICOX`,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
df.pat = sub_X_test
#DFCALLS
value <- patients <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
df.patggp.simulated_beta
coefficients <- ggp.simulated_beta$beta
v
b
b = "genes"
coefficients <- coefficients[order(coefficients[[b]]$value, decreasing = T),,drop=F]
coefficients <- coefficients[[b]][order(coefficients[[b]]$value, decreasing = T),,drop=F]
coefficients <- ggp.simulated_beta$beta
coefficients[[b]] <- coefficients[[b]][order(coefficients[[b]]$value, decreasing = T),,drop=F]
coefficients
lst_coefficients <- ggp.simulated_beta$beta
coefficients <- lst_coefficients[[b]][order(lst_coefficients[[b]]$value, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
df.pat
#norm patient
if(!is.null(model$X$x.mean[[b]]) & !is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = model$X$x.sd[[b]])
}else if(!is.null(model$X$x.mean[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = F)
}else if(!is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = F, scale = model$X$x.sd[[b]])
}else{
norm_patient <- df.pat[[b]]
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta$value
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta[[b]])] %*% ggp.simulated_beta$beta[[b]]$value
colnames(lp.pats) <- "linear predictor"
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat))
accuracy <- 0.1
auto.limits.flag = T
sd.min <- ggp.simulated_beta$sd.min[rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[rownames(coefficients),]
sd.min <- ggp.simulated_beta$sd.min[[b]][rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[[b]][rownames(coefficients),]
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
ggp <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==F,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge") + xlab(label = "Variables")
ggp2 <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge")
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
ggp2 <- ggp2 + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
}
if(!auto.limits.flag){
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1))
ggp <- ggp + scale_y_continuous(n.breaks = 10)
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10)
}else{
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1), limits = c(-1*auto.limits, auto.limits))
ggp <- ggp + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
}
if(length(unique(lp.new_pat_variable$var))>15){
ggp <- ggp + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggp2 <- ggp2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
res_all.plot <- ggp
res_lp.plot <- ggp2
ggp <- ggp + guides(fill = "none")
ggp2 <- ggp2 + ylab(label = "") + xlab(label = "")
pp <- ggpubr::ggarrange(ggp, ggp2, ncol = 2, widths = c(0.8, 0.2), align = "h")
pp
value <- patients <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
lst_coefficients <- ggp.simulated_beta$beta
coefficients <- lst_coefficients[[b]][order(lst_coefficients[[b]]$value, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean[[b]]) & !is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = model$X$x.sd[[b]])
}else if(!is.null(model$X$x.mean[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = F)
}else if(!is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = F, scale = model$X$x.sd[[b]])
}else{
norm_patient <- df.pat[[b]]
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
#Compute LP without top variables
#can be change for getLPforNewPatient(model = model, new_pat = patient, time = time, type = type, method = "cox")
#for each patient on the data frame
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta[[b]])] %*% ggp.simulated_beta$beta[[b]]$value
colnames(lp.pats) <- "linear predictor"
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat))
lp.new_pat_variable
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
lp.new_pat_variable
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta[[b]])] %*% ggp.simulated_beta$beta[[b]]$value
colnames(lp.pats) <- "linear predictor"
lp.pats
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable
tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable
lp.new_pat_variable$var
lp.new_pat_variable
tail(lp.new_pat_variable)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat[[b]]))
lp.new_pat_variable
accuracy <- 0.1
auto.limits.flag = T
sd.min <- ggp.simulated_beta$sd.min[[b]][rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[[b]][rownames(coefficients),]
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
auto.limits
ggp <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==F,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge") + xlab(label = "Variables")
ggp2 <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge")
ggp
ggp2
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
ggp2 <- ggp2 + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
}
if(!auto.limits.flag){
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1))
ggp <- ggp + scale_y_continuous(n.breaks = 10)
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10)
}else{
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1), limits = c(-1*auto.limits, auto.limits))
ggp <- ggp + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
}
if(length(unique(lp.new_pat_variable$var))>15){
ggp <- ggp + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggp2 <- ggp2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
res_all.plot <- ggp
res_lp.plot <- ggp2
ggp <- ggp + guides(fill = "none")
ggp2 <- ggp2 + ylab(label = "") + xlab(label = "")
pp <- ggpubr::ggarrange(ggp, ggp2, ncol = 2, widths = c(0.8, 0.2), align = "h")
pp
res_all.plot
norm_patients
norm_patient
lp.new_pat_variable
lp.pats
lst_plot <- list()
lst_var.plot <- list()
lst_lp.plot <- list()
lst_lp <- list()
lst_lp.var <- list()
lst_norm_patients <- list()
for(b in names(model$X$data)){
coefficients <- lst_coefficients[[b]][order(lst_coefficients[[b]]$value, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean[[b]]) & !is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = model$X$x.sd[[b]])
}else if(!is.null(model$X$x.mean[[b]])){
norm_patient <- scale(df.pat[[b]], center = model$X$x.mean[[b]], scale = F)
}else if(!is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]], center = F, scale = model$X$x.sd[[b]])
}else{
norm_patient <- df.pat[[b]]
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
#Compute LP without top variables
#can be change for getLPforNewPatient(model = model, new_pat = patient, time = time, type = type, method = "cox")
#for each patient on the data frame
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta[[b]])] %*% ggp.simulated_beta$beta[[b]]$value
colnames(lp.pats) <- "linear predictor"
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat[[b]]))
accuracy <- 0.1
auto.limits.flag = T
sd.min <- ggp.simulated_beta$sd.min[[b]][rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[[b]][rownames(coefficients),]
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
ggp <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==F,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge") + xlab(label = "Variables")
ggp2 <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge")
#guides(color = "none")
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
ggp2 <- ggp2 + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
}
if(!auto.limits.flag){
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1))
ggp <- ggp + scale_y_continuous(n.breaks = 10)
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10)
}else{
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1), limits = c(-1*auto.limits, auto.limits))
ggp <- ggp + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
}
if(length(unique(lp.new_pat_variable$var))>15){
ggp <- ggp + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggp2 <- ggp2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
res_all.plot <- ggp
res_lp.plot <- ggp2
ggp <- ggp + guides(fill = "none")
ggp2 <- ggp2 + ylab(label = "") + xlab(label = "")
pp <- ggpubr::ggarrange(ggp, ggp2, ncol = 2, widths = c(0.8, 0.2), align = "h")
lst_plot[[b]] <- pp
lst_var.plot[[b]] <- res_all.plot
lst_lp.plot[[b]] <- res_lp.plot
lst_lp[[b]] <- lp.pats
lst_lp.var[[b]] <- lp.new_pat_variable
lst_norm_patients[[b]] <- norm_patient
}
model$X$x.mean[[b]]
model$X$x.sd[[b]]
df.pat[[b]]
b
names(model$X$x.mean[[b]])
lst_plot <- list()
lst_var.plot <- list()
lst_lp.plot <- list()
lst_lp <- list()
lst_lp.var <- list()
lst_norm_patients <- list()
for(b in names(model$X$data)){
coefficients <- lst_coefficients[[b]][order(lst_coefficients[[b]]$value, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean[[b]]) & !is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]][,names(model$X$x.mean[[b]])], center = model$X$x.mean[[b]], scale = model$X$x.sd[[b]])
}else if(!is.null(model$X$x.mean[[b]])){
norm_patient <- scale(df.pat[[b]][,names(model$X$x.mean[[b]])], center = model$X$x.mean[[b]], scale = F)
}else if(!is.null(model$X$x.sd[[b]])){
norm_patient <- scale(df.pat[[b]][,names(model$X$x.sd[[b]])], center = F, scale = model$X$x.sd[[b]])
}else{
norm_patient <- df.pat[[b]]
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
#Compute LP without top variables
#can be change for getLPforNewPatient(model = model, new_pat = patient, time = time, type = type, method = "cox")
#for each patient on the data frame
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta[[b]])] %*% ggp.simulated_beta$beta[[b]]$value
colnames(lp.pats) <- "linear predictor"
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat[[b]]))
accuracy <- 0.1
auto.limits.flag = T
sd.min <- ggp.simulated_beta$sd.min[[b]][rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[[b]][rownames(coefficients),]
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
ggp <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==F,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge") + xlab(label = "Variables")
ggp2 <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge")
#guides(color = "none")
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
ggp2 <- ggp2 + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
}
if(!auto.limits.flag){
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1))
ggp <- ggp + scale_y_continuous(n.breaks = 10)
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10)
}else{
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1), limits = c(-1*auto.limits, auto.limits))
ggp <- ggp + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
}
if(length(unique(lp.new_pat_variable$var))>15){
ggp <- ggp + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggp2 <- ggp2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
res_all.plot <- ggp
res_lp.plot <- ggp2
ggp <- ggp + guides(fill = "none")
ggp2 <- ggp2 + ylab(label = "") + xlab(label = "")
pp <- ggpubr::ggarrange(ggp, ggp2, ncol = 2, widths = c(0.8, 0.2), align = "h")
lst_plot[[b]] <- pp
lst_var.plot[[b]] <- res_all.plot
lst_lp.plot[[b]] <- res_lp.plot
lst_lp[[b]] <- lp.pats
lst_lp.var[[b]] <- lp.new_pat_variable
lst_norm_patients[[b]] <- norm_patient
}
lst_plot$genes
lst_plot
load_all()
lst_cox.comparison <- plot_MB.cox.comparePatients(model = lst_models$`SB.PLS-ICOX`,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$lp.plot
lst_cox.comparison$var.plot
load_all()
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
load_all()
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison <- plot_LP.multiplePatients(model = lst_models$`SB.PLS-ICOX`,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison
load_all()
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = sub_X_test,
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$`MB.sPLS-DACOX`$plot$clinical
knitr::kable(Y_test[1:5,])
lst_cox.comparison$`SB.sPLS-DRCOX`$lp.plot
lst_cox.comparison$`SB.sPLS-DRCOX`$plot
load_all()
check()
install()
