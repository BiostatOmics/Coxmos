}
}else{
if(verbose){
message("Model not have components or is not a HDcox object.")
}
return(NA)
}
#select original or scale data - top X of each component, takes all of them
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
unique_vars <- deleteIllegalChars(unique(unlist(vars)))
vars_data <- as.data.frame(model$X$scores[rownames(model$X$scores),unique_vars,drop=F])
}else{
vars_data <- list()
for(b in names(model$X$data)){
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
vars_data[[b]] <- as.data.frame(model$X$scores[[b]][rownames(model$X$scores[[b]]),unique_vars,drop=F])
}
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
vars_num <- vars_data
if(all(dim(vars_num)>0)){
info_logrank_num <- getLogRank_NumVariables(data = vars_num, sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num <- NULL
}
}else{
info_logrank_num <- list()
vars_num <- list()
for(b in names(model$X$data)){
vars_num[[b]] <- vars_data[[b]]
if(all(dim(vars_num[[b]]))>0){
info_logrank_num[[b]] <- getLogRank_NumVariables(data = vars_num[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num[[b]] <- NULL
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(model$Y$data[,"time"]) - min(model$Y$data[,"time"])) / 20
}
##join data
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
d <- info_logrank_num$df_numASqual
v_names <- info_logrank_num$df_nvar_lrtest[,1:2]
}else{
v_names <- list()
d <- list()
for(b in names(model$X$data)){
d[[b]] <- info_logrank_num[[b]]$df_numASqual
v_names[[b]] <- info_logrank_num[[b]]$df_nvar_lrtest[,1:2]
}
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
if(only_sig){
if(length(v_names[v_names$`P-Val (Log Rank)` <= alpha,]$Variable)==0){
if(verbose){
cat("Any variable has a significant log-rank test value. Survival function, Hazard Curve and Cumulative Hazard plots will be returned.")
}
LST_SPLOT <- plot_survivalplot.qual(data = d,
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[v_names$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
}else{
LST_SPLOT <- plot_survivalplot.qual(data = d,
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names$Variable,
name_data = NULL, title = title)
}
}else{
LST_SPLOT <- list()
for(b in names(model$X$data)){
if(only_sig){
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
}else{
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]]$Variable,
name_data = NULL, title = title)
}
LST_SPLOT <- list()
for(b in names(model$X$data)){
if(only_sig){
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
}else{
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]]$Variable,
name_data = NULL, title = title)
}
b
only_sig
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
title
title = NUL
title = NULL
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
title
data = d[[b]]
sdata = data.frame(model$Y$data)
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable
name_data = NULL
lst_splots <- list()
if(!length(cn_variables)==0){
for(cn in cn_variables){
if(is.null(name_data)){
if(!cn %in% colnames(data)){
message(paste0("Variable ", cn, " not found in data."))
next
}else{
aux <- cbind(sdata, data[,cn])
}
}else{
if(!cn %in% colnames(data[[name_data]])){
message(paste0("Variable ", cn, " not found in data."))
next
}else{
aux <- cbind(sdata, data[[name_data]][,cn])
}
#delete NAs
aux <- aux[!is.na(aux[,3]),]
colnames(aux)[3] <- cn
f = as.formula(paste0("Surv(time = time, event = event) ~ ", cn))
kmsurvival <- tryCatch(
# Specifying expression
expr = {
survminer::surv_fit(formula = f, data = aux)
},
# Specifying error message
error = function(e){
message(paste0("Problems at variable ", cn, ".\n",e$message),". Try to change the name of the variable.")
NA
}
)
if(all(is.na(kmsurvival))){
next
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
colors <- RColorConesa::colorConesa(length(levels(data[,cn])))
names(colors) <- NULL
}else{
colors <- NULL
}
#GGSURVPLOT DOES NOT PRINT INTERVALS IF ALL DATA IS NOT SELECTED FOR RIBBON STYLE
#IF PROBLEMS CHANGE TO STEP STYLE
kmplot <- survminer::ggsurvplot(fit = kmsurvival, censor.shape = "|", palette = colors,
conf.int = TRUE, ggtheme = theme_bw(), legend.labs = levels(aux[,cn]),
conf.int.style = "ribbon",
conf.int.alpha = 0.25,
xlim = c(0, round2any(max(aux$time), 5, ceiling)),
pval = T,
surv.median.line = "hv", # Add medians survival
risk.table = TRUE,
legend.title = cn,
break.time.by = BREAKTIME,
font.caption = 8,
font.x = 10,
font.y = 10,
font.tickslab = 8,
font.legend = 8,
title = title)
kmplot$table <- kmplot$table + labs(title = "Patients at risk") +
theme(axis.text = element_text(size = 8)) + theme(axis.title = element_text(size = 10))
lst_splots[[cn]] <- kmplot
}
}else{
f = as.formula("Surv(time = time, event = event) ~ 1")
kmsurvival <- survminer::surv_fit(formula = f, data = sdata)
if(requireNamespace("RColorConesa", quietly = TRUE)){
colors <- RColorConesa::colorConesa(1)
names(colors) <- NULL
} else {
colors <- NULL
}
kmplot <- survminer::ggsurvplot(fit = kmsurvival, censor.shape = "|", color = colors,
conf.int = TRUE, ggtheme = theme_bw(),
conf.int.style = "ribbon",
conf.int.alpha = 0.25,
xlim = c(0, round2any(max(sdata$time), 5, ceiling)),
pval = T,
surv.median.line = "hv", # Add medians survival
risk.table = TRUE,
title = "Survival Function",
legend = "none",
break.time.by = BREAKTIME,
font.caption = 8,
font.x = 10,
font.y = 10,
font.tickslab = 8,
font.legend = 8,
title = title)
kmplot$table <- kmplot$table + labs(title = "Patients at risk") +
theme(axis.text = element_text(size = 8)) + theme(axis.title = element_text(size = 10))
lst_splots[["SurvivalFunction"]] <- kmplot
kmplot <- survminer::ggsurvplot(fit = kmsurvival, censor.shape = "|", color = colors, fun = "event",
conf.int = TRUE, ggtheme = theme_bw(),
conf.int.style = "ribbon",
conf.int.alpha = 0.25,
xlim = c(0, round2any(max(sdata$time), 5, ceiling)),
pval = T,
surv.median.line = "hv", # Add medians survival
risk.table = TRUE,
title = "Hazard Curve",
legend = "none",
break.time.by = BREAKTIME,
font.caption = 8,
font.x = 10,
font.y = 10,
font.tickslab = 8,
font.legend = 8,
title = title)
kmplot$table <- kmplot$table + labs(title = "Patients at risk") +
theme(axis.text = element_text(size = 8)) + theme(axis.title = element_text(size = 10))
lst_splots[["HazardCurve"]] <- kmplot
kmplot <- survminer::ggsurvplot(fit = kmsurvival, censor.shape = "|", color = colors, fun = "cumhaz",
conf.int = TRUE, ggtheme = theme_bw(),
conf.int.style = "ribbon",
conf.int.alpha = 0.25,
xlim = c(0, round2any(max(sdata$time), 5, ceiling)),
pval = T,
surv.median.line = "hv", # Add medians survival
risk.table = TRUE,
xlab = "Time (Days)",
ylab = "Cumulative Hazard",
title = "Cumulative Hazard",
legend = "none",
break.time.by = BREAKTIME,
font.caption = 8,
font.x = 10,
font.y = 10,
font.tickslab = 8,
font.legend = 8,
title = title)
kmplot$table <- kmplot$table + labs(title = "Patients at risk") +
theme(axis.text = element_text(size = 8)) + theme(axis.title = element_text(size = 10))
lst_splots[["CumulativeHazard"]] <- kmplot
}
!length(cn_variables)==0
cn_variables
v_names[[b]]
v_names <- list()
d <- list()
for(b in names(model$X$data)){
if(all(dim(vars_qual[[b]]))>0 & all(dim(vars_num[[b]])>0)){
d[[b]] <- cbind(vars_qual[[b]], info_logrank_num[[b]]$df_numASqual)
v_names[[b]] <- info_logrank_num[[b]]$df_nvar_lrtest[,1:2]
v_names[[b]] <- rbind(v_names[[b]], info_logrank_qual[[b]])
}else if(all(dim(vars_qual[[b]])>0)){
d[[b]] <- vars_qual[[b]]
v_names[[b]] <- info_logrank_qual[[b]]
}else{
d[[b]] <- info_logrank_num[[b]]$df_numASqual
v_names[[b]] <- info_logrank_num[[b]]$df_nvar_lrtest[,1:2]
}
v_names
info_logrank_qual <- list()
info_logrank_num <- list()
vars_qual <- list()
vars_num <- list()
for(b in names(model$X$data)){
names_qual <- apply(vars_data[[b]], 2, function(x){all(x %in% c(0,1))})
vars_qual[[b]] <- vars_data[[b]][,names_qual,drop=F]
vars_num[[b]] <- vars_data[[b]][,!names_qual,drop=F]
if(all(dim(vars_qual[[b]]))>0){
for(cn in colnames(vars_qual[[b]])){vars_qual[[b]][,cn] <- factor(vars_qual[[b]][,cn], levels = c(0, 1))}
info_logrank_qual[[b]] <- getLogRank_QualVariables(data = vars_qual[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL)
}else{
info_logrank_qual[[b]] = NULL
}
if(all(dim(vars_num[[b]]))>0){
info_logrank_num[[b]] <- getLogRank_NumVariables(data = vars_num[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num[[b]] <- NULL
}
# DFCALLS
lst_vars <- info_logrank_qual <- NULL
vars_data <- list()
for(b in names(model$X$data)){
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
vars_data[[b]] <- as.data.frame(model$X$scores[[b]][rownames(model$X$scores[[b]]),unique_vars,drop=F])
}
vars_data
unique_vars
if(!all(is.null(model$survival_model))){
vars <- names(model$survival_model$fit$coefficients)
}else{
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
vars
attr(model, "model") %in% pkg.env$multiblock_methods
!all(is.null(model$survival_model))
model$list_spls_models$genes$X$W.star
lst_vars[[b]] <- rownames(model[[4]][[b]]$X$W.star)
lst_vars[[b]]
model <-- lst_models$`MB.sPLS-DRCOX`
model <- lst_models$`MB.sPLS-DRCOX`
rownames(model$X$W.star[[b]])
# DFCALLS
lst_vars <- info_logrank_qual <- NULL
# DFCALLS
vars <- lst_vars <- info_logrank_qual <- NULL
if(attr(model, "model") %in% pkg.env$pls_methods){
if(!all(is.null(model$survival_model))){
vars <- names(model$survival_model$fit$coefficients)
}else{
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
}else if(attr(model, "model") %in% pkg.env$multiblock_methods){
if(!all(is.null(model$survival_model))){
for(b in names(model$X$data)){
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
lst_vars[[b]] <- rownames(model[[4]][[b]]$X$W.star)
}else{
lst_vars[[b]] <- rownames(model$X$W.star[[b]])
}
vars <- names(model$survival_model$fit$coefficients)
}else{
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
}else{
if(verbose){
message("Model not have components or is not a HDcox object.")
}
return(NA)
}
lst_vars
model <- lst_models$`SB.sPLS-DRCOX`
if(!all(is.null(model$survival_model))){
for(b in names(model$X$data)){
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
lst_vars[[b]] <- rownames(model[[4]][[b]]$X$W.star)
}else{
lst_vars[[b]] <- rownames(model$X$W.star[[b]])
}
vars <- names(model$survival_model$fit$coefficients)
}else{
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
lst_vars
#select original or scale data - top X of each component, takes all of them
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
unique_vars <- deleteIllegalChars(unique(unlist(vars)))
vars_data <- as.data.frame(model$X$scores[rownames(model$X$scores),unique_vars,drop=F])
}else{
vars_data <- list()
for(b in names(model$X$data)){
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
vars_data[[b]] <- as.data.frame(model$X$scores[[b]][rownames(model$X$scores[[b]]),unique_vars,drop=F])
}
vars_data
vars_data <- list()
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
unique_vars
b
model[[4]][[b]]$X$scores
unique_vars
model[[4]][[b]]$X$W.star
if(!all(is.null(model$survival_model))){
for(b in names(model$X$data)){
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
lst_vars[[b]] <- colnames(model[[4]][[b]]$X$W.star)
}else{
lst_vars[[b]] <- colnames(model$X$W.star[[b]])
}
vars <- names(model$survival_model$fit$coefficients)
}else{
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
unique_vars
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
unique_vars
vars_data <- list()
for(b in names(model$X$data)){
unique_vars <- deleteIllegalChars(unique(unlist(lst_vars[[b]])))
if(attr(model, "model") %in% c(pkg.env$sb.plsicox, pkg.env$sb.splsdrcox)){
vars_data[[b]] <- as.data.frame(model[[4]][[b]]$X$scores[rownames(model[[4]][[b]]$X$scores),unique_vars,drop=F])
}else{
vars_data[[b]] <- as.data.frame(model$X$scores[[b]][rownames(model$X$scores[[b]]),unique_vars,drop=F])
}
vars_data
info_logrank_num <- list()
vars_num <- list()
for(b in names(model$X$data)){
vars_num[[b]] <- vars_data[[b]]
if(all(dim(vars_num[[b]]))>0){
info_logrank_num[[b]] <- getLogRank_NumVariables(data = vars_num[[b]], sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num[[b]] <- NULL
}
info_logrank_num
if(is.null(BREAKTIME)){
BREAKTIME <- (max(model$Y$data[,"time"]) - min(model$Y$data[,"time"])) / 20
}
##join data
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
d <- info_logrank_num$df_numASqual
v_names <- info_logrank_num$df_nvar_lrtest[,1:2]
}else{
v_names <- list()
d <- list()
for(b in names(model$X$data)){
d[[b]] <- info_logrank_num[[b]]$df_numASqual
v_names[[b]] <- info_logrank_num[[b]]$df_nvar_lrtest[,1:2]
}
if(!attr(model, "model") %in% pkg.env$multiblock_methods){
if(only_sig){
if(length(v_names[v_names$`P-Val (Log Rank)` <= alpha,]$Variable)==0){
if(verbose){
cat("Any variable has a significant log-rank test value. Survival function, Hazard Curve and Cumulative Hazard plots will be returned.")
}
LST_SPLOT <- plot_survivalplot.qual(data = d,
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[v_names$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
}else{
LST_SPLOT <- plot_survivalplot.qual(data = d,
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names$Variable,
name_data = NULL, title = title)
}
}else{
LST_SPLOT <- list()
for(b in names(model$X$data)){
if(only_sig){
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]][v_names[[b]]$`P-Val (Log Rank)` <= alpha,]$Variable,
name_data = NULL, title = title)
}else{
LST_SPLOT[[b]] <- plot_survivalplot.qual(data = d[[b]],
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names[[b]]$Variable,
name_data = NULL, title = title)
}
LST_SPLOT
load_all()
LST_KM_RES_COMP <- getAutoKM.list(type = "COMP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_COMP$`SB.PLS-ICOX`$LST_PLOTS$genes
LST_KM_RES_COMP$`SB.sPLS-DRCOX`$LST_PLOTS$genes$comp_1
LST_KM_RES_VAR <- getAutoKM.list(type = "VAR",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_VAR$`SB.sPLS-DRCOX`$LST_PLOTS$genes$MOXD1$plot
LST_KM_RES_VAR$`SB.sPLS-DRCOX`$LST_PLOTS$genes$SCG5$plot
LST_KM_RES_VAR$`SB.sPLS-DRCOX`$LST_PLOTS$genes$SCG5
LST_KM_RES_VAR$`SB.sPLS-DRCOX`$LST_PLOTS$miRNA$hsa_miR_148a
LST_KM_RES_VAR$`SB.sPLS-DRCOX`$LST_PLOTS$miRNA$hsa_miR_34a
new_pat <- X_test[1,,drop=F]
X_test
new_pat <- list()
for(b in names(X_test)){
new_pat[[b]] <- X_test[[b]][1,,drop=F]
}
X_test$new_pat
new_pat
new_pat$genes
dim(new_pat$genes)
new_pat <- list()
for(b in names(X_test)){
new_pat[[b]] <- X_test[[b]][1,,drop=F]
}
knitr::kable(Y_test[rownames(new_pat),])
knitr::kable(Y_test[rownames(new_pat$genes),])
ggp.simulated_beta_newPat <- plot_pseudobeta.newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
save.image("D:/Pedro/Mega/Doctorado/Otros proyectos/R/working_image_MO.RData")
