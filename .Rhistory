ylab(label = paste0("comp_",as.character(comp[2])))
}
ggp
names = T
if(allNames){
ggp <- ggp + ggrepel::geom_text_repel(data = as.data.frame(df),
aes(x = as.data.frame(df)[,comp[1]],
y = as.data.frame(df)[,comp[2]]),
label = rownames(as.data.frame(df)), size=text.size)
}else if(names){
ggp <- ggp + ggrepel::geom_text_repel(data = subdata, aes(x = subdata[,comp[1]],
y = subdata[,comp[2]]),
label = rownames(subdata), size=text.size)
}
ggp
ggp + ggrepel::geom_text_repel(data = as.data.frame(df),
aes(x = as.data.frame(df)[,comp[1]],
y = as.data.frame(df)[,comp[2]]),
label = rownames(as.data.frame(df)), size=text.size)
radius
if(!is.null(radius) & nrow(subdata)!=0){
if(requireNamespace("ggforce", quietly = TRUE)){
ggp <- ggp + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = radius))
}
ggp
message("The model has only 1 component")
df <- cbind(aux.model$X$scores, aux.model$X$scores)
colnames(df) <- c("p1", "p2")
message("The model has only 1 component")
df <- as.data.frame(cbind(aux.model$X$scores, aux.model$X$scores))
colnames(df) <- c("p1", "p2")
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
ggp
df <- as.data.frame(aux.model$X$scores)
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
ggp <- ggp + stat_ellipse(aes(x = df[,comp[1]], y = df[,comp[2]], fill = factor), geom = "polygon", alpha = 0.1, show.legend=F)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
ggp
df_loading <- as.data.frame(aux.model$X$loadings)
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
max.scores
df_loading <- as.data.frame(cbind(aux.model$X$loadings[,1], aux.model$X$loadings[,1]))
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
max.scores
df_loading <- as.data.frame(cbind(aux.model$X$loadings[,1], aux.model$X$loadings[,1]))
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
max.scores
df_loading
apply(abs(df_loading), 2, max)
df <- as.data.frame(aux.model$X$scores)
df_loading <- as.data.frame(aux.model$X$loadings)
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
ggp <- ggp + stat_ellipse(aes(x = df[,comp[1]], y = df[,comp[2]], fill = factor), geom = "polygon", alpha = 0.1, show.legend=F)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
MAX_LOADINGS
nrow(df_loading)
if(nrow(df_loading)<MAX_LOADINGS){
subdata_loading <- df_loading
}else if(!is.null(top)){
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
subdata_loading <- df_loading[names(aux_loadings)[1:top],]
}else{
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
}
top = NULL
if(nrow(df_loading)<MAX_LOADINGS){
subdata_loading <- df_loading
}else if(!is.null(top)){
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
subdata_loading <- df_loading[names(aux_loadings)[1:top],]
}else{
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
}
#depending on DF instead of df_loadings - ARROWS
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
if(nrow(no_selected_loadings)!=0){
ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
}
ggp <- ggp + geom_segment(data = subdata_loading, lineend = "butt", linejoin = "mitre", size = 0.33,
aes(x = 0, y = 0, xend = subdata_loading[,comp[1]], yend = subdata_loading[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
if(allNames){
ggp <- ggp + ggrepel::geom_text_repel(data = as.data.frame(df_loading), aes(x = as.data.frame(df_loading)[,comp[1]],
y = as.data.frame(df_loading)[,comp[2]]),
label = rownames(as.data.frame(df_loading)), size=text.size, segment.size = 0.2)
}else if(names){
ggp <- ggp + ggrepel::geom_text_repel(data = subdata_loading, aes(x = subdata_loading[,comp[1]],
y = subdata_loading[,comp[2]]),
label = rownames(subdata_loading), size=text.size, segment.size = 0.2)
}
if(is.null(top) &!is.null(radius) & nrow(df) < MAX_POINTS){
#ggp <- ggp + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = radius * max(ratio[comp[1]])))
ggp <- ggp + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = radius))
}
ggp
#scale scores to -1,1
df <- norm01(df[,comp])*2-1
load_all()
#scale scores to -1,1
df <- norm01(df[,comp])*2-1
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
ggp <- ggp + stat_ellipse(aes(x = df[,comp[1]], y = df[,comp[2]], fill = factor), geom = "polygon", alpha = 0.1, show.legend=F)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
if(nrow(df_loading)<MAX_LOADINGS){
subdata_loading <- df_loading
}else if(!is.null(top)){
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
subdata_loading <- df_loading[names(aux_loadings)[1:top],]
}else{
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
}
#depending on DF instead of df_loadings - ARROWS
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
if(nrow(no_selected_loadings)!=0){
ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
}
ggp <- ggp + geom_segment(data = subdata_loading, lineend = "butt", linejoin = "mitre", size = 0.33,
aes(x = 0, y = 0, xend = subdata_loading[,comp[1]], yend = subdata_loading[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
if(allNames){
ggp <- ggp + ggrepel::geom_text_repel(data = as.data.frame(df_loading), aes(x = as.data.frame(df_loading)[,comp[1]],
y = as.data.frame(df_loading)[,comp[2]]),
label = rownames(as.data.frame(df_loading)), size=text.size, segment.size = 0.2)
}else if(names){
ggp <- ggp + ggrepel::geom_text_repel(data = subdata_loading, aes(x = subdata_loading[,comp[1]],
y = subdata_loading[,comp[2]]),
label = rownames(subdata_loading), size=text.size, segment.size = 0.2)
}
if(is.null(top) &!is.null(radius) & nrow(df) < MAX_POINTS){
#ggp <- ggp + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = radius * max(ratio[comp[1]])))
ggp <- ggp + ggforce::geom_circle(aes(x0 = 0, y0 = 0, r = radius))
}
ggp
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings
comp
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
aux_loadings
!is.null(top)
radius
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
subdata_loading
#depending on DF instead of df_loadings - ARROWS
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
no_selected_loadings
#scale scores to -1,1
df <- norm01(df[,comp])*2-1
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
ggp <- ggp + stat_ellipse(aes(x = df[,comp[1]], y = df[,comp[2]], fill = factor), geom = "polygon", alpha = 0.1, show.legend=F)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
if(nrow(df_loading)<MAX_LOADINGS){
subdata_loading <- df_loading
}else if(!is.null(top)){
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
subdata_loading <- df_loading[names(aux_loadings)[1:top],]
}else{
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
}
#depending on DF instead of df_loadings - ARROWS
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
ggp <- ggp + geom_segment(data = subdata_loading, lineend = "butt", linejoin = "mitre", size = 0.33,
aes(x = 0, y = 0, xend = subdata_loading[,comp[1]], yend = subdata_loading[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
ggp
ggp + ggrepel::geom_text_repel(data = subdata_loading, aes(x = subdata_loading[,comp[1]],
y = subdata_loading[,comp[2]]),
label = rownames(subdata_loading), size=text.size, segment.size = 0.2)
?geom_text_repel
ggp <- ggp + ggrepel::geom_text_repel(data = subdata_loading, aes(x = subdata_loading[,comp[1]],
y = subdata_loading[,comp[2]]),
label = rownames(subdata_loading), size=text.size, segment.size = 0.2,
max.overlaps = getOption("ggrepel.max.overlaps", default = 30))
ggp
# ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
#                           aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
ggp <- ggp + geom_point(data = no_selected_loadings)
ggp
no_selected_loadings
# ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
#                           aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
ggp <- ggp + geom_point(data = no_selected_loadings, aes(x = no_selected_loadings[,1], y = no_selected_loadings[,2], size = 1))
ggp
# ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
#                           aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
ggp <- ggp + geom_point(aes(x = no_selected_loadings[,1], y = no_selected_loadings[,2], size = 1))
ggp
no_selected_loadings[,1]
no_selected_loadings[,2]
geom_point(aes(x = no_selected_loadings[,1], y = no_selected_loadings[,2], size = 1))
# ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
#                           aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]], yend = no_selected_loadings[,comp[2]]), arrow = arrow(length = unit(0.1, "cm")))
ggp <- ggp + geom_point(aes(x = no_selected_loadings[,1], y = no_selected_loadings[,2], size = 1), data = no_selected_loadings)
ggp
load_all()
ggp_scores <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "scores",
top = 10)
ggp_scores
ggp_scores$plot
load_all()
ggp_scores <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "scores",
top = 10)
ggp_scores <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "scores")
ggp_scores$plot
load_all()
ggp_loadings <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "loadings",
top = 10)
ggp_loadings$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
top = 10) #length from 0,0
ggp_biplot$plot
load_all()
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
top = 10, #length from 0,0
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`PLS-ICOX`,
comp = c(1,2), mode = "biplot",
top = 10, #length from 0,0
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
top = 10, #length from 0,0
only_top = T)
ggp_biplot$plot
?geom_text_repel
load_all()
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
radius = 0.25, #length from 0,0
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
radius = 0.2, #length from 0,0
only_top = T)
ggp_biplot$plot
load_all()
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
radius = 0.2, #length from 0,0
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
radius = NULL, #length from 0,0
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
only_top = T)
ggp_biplot$plot
top = NULL
radius = NULL
MAX_POINTS = 1000
MAX_LOADINGS = 15
POINT_SIZE = 3
POINT_SIZE_LOAD = 1.5 #another scale
POINT_RES = c(1024, 1024)
ggp = NULL
aux.model = model
if(!is.null(top) & !is.null(radius)){
message("Only top meassure will be used. Radius and top do not work simultaneously.")
radius <- NULL
}
modes <- c("scores", "loadings", "biplot")
if(!mode %in% modes){
stop_quietly(paste0("mode must be one of the following: ", paste0(modes, collapse = ", ")))
}
if(!is.null(factor)){
if(class(factor)!="factor" & mode %in% c("scores", "biplot")){
stop_quietly("Factor must be a factor object.")
}
}else{
factor <- factor(model$Y$data[,"event"])
}
if(!class(aux.model)==pkg.env$model_class){
stop_quietly("aux.model must be a HDcox object.")
}else if(!attr(aux.model, "model") %in% pkg.env$pls_methods){
stop_quietly("aux.model must be a HDcox object pls class ('PLS-ICOX','sPLS-DRCOX','sPLS-DRCOX-MixOmics' or 'PLS-DACOX-MixOmics').")
}
if(ncol(aux.model$X$loadings)==1){
message("The model has only 1 component")
df <- as.data.frame(cbind(aux.model$X$scores, aux.model$X$scores))
colnames(df) <- c("p1", "p2")
df_loading <- as.data.frame(cbind(aux.model$X$loadings[,1], aux.model$X$loadings[,1]))
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
}else{
df <- as.data.frame(aux.model$X$scores)
df_loading <- as.data.frame(aux.model$X$loadings)
max.loadings <- apply(abs(df_loading), 2, max)
max.scores <- apply(abs(df), 2, max)
}
#scale scores to -1,1
df <- norm01(df[,comp])*2-1
ggp <- ggplot(as.data.frame(df))
if(nrow(df) > MAX_POINTS){
ggp <- ggp + scattermore::geom_scattermore(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor), pointsize = POINT_SIZE, pixels = POINT_RES)
}else{
ggp <- ggp + geom_point(aes(x = df[,comp[1]], y = df[,comp[2]], color = factor))
}
ggp <- ggp + labs(color = legend.title) + theme(legend.position="bottom") + coord_fixed(ratio=1)
ggp <- ggp + stat_ellipse(aes(x = df[,comp[1]], y = df[,comp[2]], fill = factor), geom = "polygon", alpha = 0.1, show.legend=F)
if("R2" %in% names(model)){
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),") - ")
r2_1 <- round(model$R2[[comp[1]]], 4)
r2_2 <- round(model$R2[[comp[2]]], 4)
r2 <- round(sum(r2_1, r2_2), 4)
ggp <- ggp + ggtitle(label = bquote(.(txt.expression) ~R^2 == .(r2))) +
xlab(label = paste0("comp_",as.character(comp[1]), " (", as.character(r2_1*100), " %)")) +
ylab(label = paste0("comp_",as.character(comp[2]), " (", as.character(r2_2*100), " %)"))
}else{
txt.expression <- paste0("Biplot (",attr(aux.model, "model"),")")
ggp <- ggp + ggtitle(label = bquote(.(txt.expression))) +
xlab(label = paste0("comp_",as.character(comp[1]))) +
ylab(label = paste0("comp_",as.character(comp[2])))
}
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + scale_color_conesa(reverse = colorReverse) +
scale_fill_conesa(reverse = colorReverse)
}
if(nrow(df_loading)<MAX_LOADINGS){
subdata_loading <- df_loading
}else if(!is.null(top)){
aux_loadings <- apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))})
aux_loadings <- aux_loadings[order(aux_loadings, decreasing = T)]
subdata_loading <- df_loading[names(aux_loadings)[1:top],]
}else if(!is.null(radius)){
subdata_loading <- df_loading[apply(df_loading,1,function(x){sqrt(crossprod(as.numeric(x[comp])))>radius}),]
}else{
subdata_loading <- NULL
}
subdata_loading
#depending on DF instead of df_loadings - ARROWS
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
no_selected_loadings
any(!is.null(top), !is.null(radius))
names & !is.null(subdata_loading)
is.null(top) &!is.null(radius) & nrow(df) < MAX_POINTS
load_all()
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
only_top = T)
ggp_biplot$plot
no_selected_loadings <- df_loading[!rownames(df_loading) %in% rownames(subdata_loading),]
if(nrow(no_selected_loadings)!=0 & !only_top){
ggp <- ggp + geom_segment(data = no_selected_loadings, lineend = "butt", linejoin = "mitre", size = 0.2,
aes(x = 0, y = 0, xend = no_selected_loadings[,comp[1]],
yend = no_selected_loadings[,comp[2]]),
arrow = arrow(length = unit(0.1, "cm")))
}
load_all()
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
top = 5,
only_top = T)
ggp_biplot$plot
ggp_biplot <- plot_HDcox.PLS.model(model = lst_models$`SPLS-DRCOX`,
comp = c(1,2), mode = "biplot",
top = 15,
only_top = T)
ggp_biplot$plot
95/5
?caret::nearZeroVar
80/20
80/2090/10
90/10
95/5
94/6
93/7
load_all()
check()
load_all()
check()
load_all()
check()
install()
