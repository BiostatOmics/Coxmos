pat_density
pat_histogram <- plot_patient.eventHistogram(patient = new_pat, time = NULL, model = lst_models$`SPLS-DRCOX`)
pat_histogram
?plot_patient.eventDensity
pat_density <- plot_patient.eventDensity(patient = new_pat, time = NULL, model = lst_models$`SPLS-DRCOX`, type = "lp")
pat_density
?plot_divergent.biplot
library(devtools)
load_all()
check()
dpi = 125
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dpi=dpi,
fig.retina=1,
fig.width=1440/dpi, #4:3 FHD
fig.height=1080/dpi,
out.width="100%",
crop = NULL,
warning = T,
error = T
)
rm(dpi)
# load HDcox
library(HDcox)
library(RColorConesa)
#theme_set(theme_colorConesa()) #under development
# load Tasic dataset
data("X_small_data_E.MTAB.386")
data("Y_small_data_E.MTAB.386")
X <- X_small_data_E.MTAB.386
Y <- Y_small_data_E.MTAB.386
rm(X_small_data_E.MTAB.386, Y_small_data_E.MTAB.386)
knitr::kable(X[1:5,1:5])
knitr::kable(Y[1:5,])
ggp_density.event <- plot_events(Y = Y, roundTo = 0.25, categories = c("Censored","Death")) #name for F and T
ggp_density.event$plot
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #1103
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #472
Y_test <- Y[-index_train,]
EPV <- sum(Y_train$event==1) / ncol(X_train)
EPV
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F)
plsicox_model
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 2, eta = 0.25, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F)
splsdrcox_model
plsdacox_model <- plsdacox_mixOmics(X = X_train, Y = Y_train,
n.comp = 3, #cv.plsdacox_res$opt.comp
x.center = T, x.scale = F)
plsdacox_model
lst_models <- list("PLS-ICOX" = plsicox_model,
"SPLS-DRCOX" = splsdrcox_model,
"PLS-DACOX" = plsdacox_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = seq(1,4,0.5), max_time_points = 15,
PARALLEL = T)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = T))
eval_results
#eval_results$cenROC
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$t.test
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_models_time <- list(plsicox_model,
splsdrcox_model,
plsdacox_model,
eval_results)
ggp_time <- plot_time.models(lst_models_time)
ggp_time
lst_forest_plot <- purrr::map(lst_models, ~survminer::ggforest(.$survival_model$fit,
data = .$survival_model$fit$model))
lst_forest_plot$`SPLS-DRCOX`
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.lp$`SPLS-DRCOX`$plot.density
density.plots.lp$`SPLS-DRCOX`$plot.histogram
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`SPLS-DRCOX`
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20)
ggp.simulated_beta$`SPLS-DRCOX`$plot
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`SPLS-DRCOX`$LST_PLOTS$LP
LST_KM_RES_COMP <- getAutoKM.list(type = "COMP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_COMP$`SPLS-DRCOX`$LST_PLOTS$comp_1
LST_KM_RES_COMP$`SPLS-DRCOX`$LST_PLOTS$comp_2
LST_KM_RES_VAR <- getAutoKM.list(type = "VAR",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_VAR$`SPLS-DRCOX`$LST_PLOTS$POSTN
LST_KM_RES_VAR$`SPLS-DRCOX`$LST_PLOTS$SIRT5
new_pat <- X_test[1,,drop=F]
knitr::kable(Y_test[rownames(new_pat),])
ggp.simulated_beta_newPat <- plot_pseudobeta.newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
ggp.simulated_beta_newPat$`SPLS-DRCOX`$plot
pat_density <- plot_patient.eventDensity(patient = new_pat,
time = NULL,
model = lst_models$`SPLS-DRCOX`,
type = "lp")
pat_density
pat_histogram <- plot_patient.eventHistogram(patient = new_pat,
time = NULL,
model = lst_models$`SPLS-DRCOX`,
type = "lp")
#plot_divergent.biplot - for num and qual variables
df.pat = X_test[1:5,]
error.bar = T
zero.rm = T
onlySig = T
alpha = 0.05
top = 5
model <- lst_models$`SPLS-DRCOX`
#DFCALLS
value <- patients <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
ggp.simulated_beta$plot
ggp.simulated_beta$beta
coefficients <- ggp.simulated_beta$beta
coefficients <- coefficients[order(coefficients, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"coef"] <- abs(aux_df[,"coef",drop=F])
aux_df <- aux_df[order(aux_df[,"coef",drop=F], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients #predict terms
})
lp.pats <- norm_patient[,rownames(coefficients)] %*% coefficients
lp.new_pat_variable
lp.pats <- norm_patient[,rownames(coefficients)] %*% coefficients
lp.pats
patient
patient = new_pat
#DFCALLS
x <- y <- event <- NULL
scores <- predict.HDcox(object = model, newdata = patient) #X must be original X data
scores
head(patient[,1:5])
type = "lp"
pred.value <- predict(object = model$survival_model$fit, newdata = new_pat, type = type)
model
if(type %in% c("expected", "survival")){
new_pat <- as.data.frame(cbind(scores, data.frame(time = time, event = 0)))
}else{
new_pat <- as.data.frame(scores)
}
pred.value <- predict(object = model$survival_model$fit, newdata = new_pat, type = type)
pred.value
RES_LP_COX = pred.value
new_pat <- X_test[1,,drop=F]
#DFCALLS
lp <- lp.min <- lp.max <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
coefficients <- ggp.simulated_beta$beta
coeff.min <- NULL
coeff.max <- NULL
if(error.bar){
coeff.min <- ggp.simulated_beta$sd.min
coeff.max <- ggp.simulated_beta$sd.max
}
coefficients
coeff.min <- NULL
coeff.max <- NULL
if(error.bar){
coeff.min <- ggp.simulated_beta$sd.min
coeff.max <- ggp.simulated_beta$sd.max
}
#norm patient
new_pat <- new_pat[,names(model$X$x.mean),drop=F]
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- new_pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- norm_patient[,rownames(coefficients)] * coefficients #predict terms
lp.new_pat_variable
lp.new_pat_variable.min <- NULL
lp.new_pat_variable.max <- NULL
if(error.bar){
lp.new_pat_variable.min <- norm_patient[,rownames(coeff.min)] * coeff.min
lp.new_pat_variable.max <- norm_patient[,rownames(coeff.max)] * coeff.max
}
#filter pat_variables using psudobeta plot (top could be applied)
lp.new_pat_variable <- lp.new_pat_variable[rownames(ggp.simulated_beta$plot$data),,drop=F]
lp.new_pat_variable.min <- lp.new_pat_variable.min[rownames(ggp.simulated_beta$plot$data),,drop=F]
lp.new_pat_variable.max <- lp.new_pat_variable.max[rownames(ggp.simulated_beta$plot$data),,drop=F]
coefficients <- coefficients[rownames(lp.new_pat_variable),,drop=F]
df.pat$lp <- as.numeric(df.pat$lp)
lp.new_pat_variable
lp <- lp.min <- lp.max <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
coefficients <- ggp.simulated_beta$beta
coeff.min <- NULL
coeff.max <- NULL
if(error.bar){
coeff.min <- ggp.simulated_beta$sd.min
coeff.max <- ggp.simulated_beta$sd.max
}
#norm patient
new_pat <- new_pat[,names(model$X$x.mean),drop=F]
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- new_pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- norm_patient[,rownames(coefficients)] * coefficients #predict terms
lp.new_pat_variable
colSums(lp.new_pat_variable)
RES_LP_COX
value <- patients <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
coefficients <- ggp.simulated_beta$beta
coefficients <- coefficients[order(coefficients, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"coef"] <- abs(aux_df[,"coef",drop=F])
aux_df <- aux_df[order(aux_df[,"coef",drop=F], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients #predict terms
})
ggp.simulated_beta$beta
dim(ggp.simulated_beta$beta)
#Compute LP without top variables
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta
lp.pats
RES_LP_COX
scores <- predict.HDcox(object = model, newdata = new_pat) #X must be original X data
scores
pred.value <- predict(object = model$survival_model$fit, newdata = scores, type = "lp")
time = NULL
type = "lp"
scores <- predict.HDcox(object = model, newdata = new_pat) #X must be original X data
if(type %in% c("expected", "survival") & is.null(time)){
stop("For survivial or expected prediction, you must provided a specific time of study.")
}
if(type %in% c("expected", "survival")){
df <- as.data.frame(cbind(scores, data.frame(time = time, event = 0)))
}else{
df <- as.data.frame(scores)
}
if(all(is.null(model$survival_model))){
stop("Survival model not found.")
}
pred.value <- predict(object = model$survival_model$fit, newdata = new_pat, type = type)
df
model$survival_model$fit
pred.value <- predict(object = model$survival_model$fit, newdata = df, type = type)
pred.value
method = "W.star"
pred.value
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
coefficients <- ggp.simulated_beta$beta
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
pred.value
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
pred.value <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta
pred.value
ggp.simulated_beta <- plot_pseudobeta(model = model)
new_pat
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- new_pat
}
pred.value <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta
pred.value
pred.value <- predict(object = model$survival_model$fit, newdata = df, type = type)
pred.value
class(pred.value)
pred.value <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta
class(pred.value)
pred.value <- pred.value[[1]]
pred.value
names(pred.value) <- rownames(new_pat)
pred.value
coefficients <- as.matrix(model$survival_model$fit$coefficients)
sd <- df.aux[,"se(coef)",drop=F]
W.star <- model$X$W.star
vector <- W.star %*% coefficients
vector
vector = ggp.simulated_beta$beta[rownames(vector),]
vector <- W.star %*% coefficients
vector == ggp.simulated_beta$beta[rownames(vector),]
vector
beta <- as.matrix(model$survival_model$fit$coefficients)
W.star <- model$X$W.star
coefficients <- W.star %*% beta
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(new_pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(new_pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- new_pat
}
pred.value <- norm_patient[,rownames(coefficients)] %*% coefficients
pred.value <- pred.value[[1]]
names(pred.value) <- rownames(new_pat)
pred.value
load_all()
pred.value <- getLPforNewPatient(model = model, new_pat = patient, time = time, type = type, method = "cox")
pred.value
load_all()
check()
load_all()
lst_cox.comparison <- plot_cox.comparePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$`SPLS-DRCOX`$lp.plot
lst_cox.comparison$`SPLS-DRCOX`$plot
lst_cox.comparison$`SPLS-DRCOX`$lp
lst_cox.comparison$`SPLS-DRCOX`$lp.var
lst_cox.comparison$`SPLS-DRCOX`$patients
lst_cox.comparison$`SPLS-DRCOX`$norm_patients
install()
getLPforNewPatient(model = model, new_pat = X_test[1,])
dpi = 125
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
dpi=dpi,
fig.retina=1,
fig.width=1440/dpi, #4:3 FHD
fig.height=1080/dpi,
out.width="100%",
crop = NULL,
warning = T,
error = T
)
rm(dpi)
# load HDcox
library(HDcox)
library(RColorConesa)
#theme_set(theme_colorConesa()) #under development
# load Tasic dataset
data("X_small_data_E.MTAB.386")
data("Y_small_data_E.MTAB.386")
X <- X_small_data_E.MTAB.386
Y <- Y_small_data_E.MTAB.386
rm(X_small_data_E.MTAB.386, Y_small_data_E.MTAB.386)
knitr::kable(X[1:5,1:5])
knitr::kable(Y[1:5,])
ggp_density.event <- plot_events(Y = Y, roundTo = 0.25, categories = c("Censored","Death")) #name for F and T
ggp_density.event$plot
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #1103
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #472
Y_test <- Y[-index_train,]
EPV <- sum(Y_train$event==1) / ncol(X_train)
EPV
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F)
plsicox_model
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 2, eta = 0.25, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F)
splsdrcox_model
plsdacox_model <- plsdacox_mixOmics(X = X_train, Y = Y_train,
n.comp = 3, #cv.plsdacox_res$opt.comp
x.center = T, x.scale = F)
plsdacox_model
lst_models <- list("PLS-ICOX" = plsicox_model,
"SPLS-DRCOX" = splsdrcox_model,
"PLS-DACOX" = plsdacox_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = seq(1,4,0.5), max_time_points = 15,
PARALLEL = T)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = T))
getLPforNewPatient(model = lst_models$`SPLS-DRCOX`, new_pat = X_test[1,])
getLPforNewPatient(model = lst_models$`SPLS-DRCOX`, new_pat = X_test[2,])
getLPforNewPatient(model = lst_models$`SPLS-DRCOX`, new_pat = X_test[3,])
getLPforNewPatient(model = lst_models$`SPLS-DRCOX`, new_pat = X_test[4,])
getLPforNewPatient(model = lst_models$`SPLS-DRCOX`, new_pat = X_test[5,])
Y_test[4,]
Y_test[3,]
Y_test[2,]
Y_test[1,]
