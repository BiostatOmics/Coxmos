p = .8, # 80% train
list = FALSE,
times = 1)
# load Tasic dataset
data("X_miRNA_glioblastoma")
data("Y_miRNA_glioblastoma")
X <- X_miRNA_glioblastoma
Y <- Y_miRNA_glioblastoma
rm(X_miRNA_glioblastoma, Y_miRNA_glioblastoma)
set.seed(321)
index_train <- caret::createDataPartition(Y$event,
p = .8, # 80% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #443x534
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #109x534
Y_test <- Y[-index_train,]
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX-MixOmics" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = NULL, max_time_points = 15,
PARALLEL = T)
#Check at least two events in total
checkAtLeastTwoEvents(X_test, Y_test)
#Check evaluator installed:
checkLibraryEvaluator(pred.method)
if(all(is.null(lst_models))){
stop("List of model is NULL")
}
if(!pred.attr %in% c("mean", "median")){
stop("pred.attr parameter must be one of: 'mean' or 'median'")
}
t1 <- Sys.time()
if(verbose){
message(paste0("\nEvaluating with ", pred.method, "...\n"))
}
#TEST DATA
if(is.null(times)){
times <- getVectorOfTime(Y_test, max_time_points)
}
#MULTIBLOCK
if(isa(X_test, "list")){
X_test_ori  <- purrr::map(X_test, ~data.matrix(.))
Y_test  <- Y_test
}else{
X_test_ori  <- data.matrix(X_test)
Y_test  <- Y_test
}
#models not NAs
names_lst_models <- unlist(lapply(lst_models, function(x){!all(is.na(x))}))
names_lst_models <- names(names_lst_models)[names_lst_models==T]
lst_models <- lst_models[names_lst_models]
if(progress_bar){
total_models <- length(lst_models)
pb_text <- "(:spin) [:bar] :percent [Elapsed time: :elapsedfull || Estimated remaining time: :eta]"
pb <- progress::progress_bar$new(format = pb_text,
total = total_models,
complete = "=",   # Caracteres de las iteraciones finalizadas
incomplete = "-", # Caracteres de las iteraciones no finalizadas
current = ">",    # Caracter actual
clear = FALSE,    # Si TRUE, borra la barra cuando termine
width = 100)      # Ancho de la barra de progreso
pb$tick(0)
}
lst_eval <- list()
lst_eval <- purrr::map(lst_models, ~evaluation_list_HDcox(model = ., X_test, Y_test, pred.method, pred.attr, times, PARALLEL = F, verbose, progress_bar))
names(lst_eval) <- names(lst_models)
lst_AUC <- list()
df <- NULL
for(m in names(lst_eval)){
lst_AUC[[m]] <- lst_eval[[m]]$lst_AUC_values
#if AUC_values is NA, we cannot access to lst_AUC_values$AUC.vector
if(!all(is.na(lst_eval[[m]]$lst_AUC_values))){
df <- rbind(df, c(m, lst_eval[[m]]$model_time, lst_eval[[m]]$comp.time, lst_eval[[m]]$aic.cox, lst_eval[[m]]$c_index.cox, lst_eval[[m]]$lst_AUC_values$AUC.vector))
}else{
df <- rbind(df, c(m, lst_eval[[m]]$model_time, lst_eval[[m]]$comp.time, lst_eval[[m]]$aic.cox, lst_eval[[m]]$c_index.cox, rep(NA, length(times))))
}
df <- as.data.frame(df)
}
final_times <- times #all the same
if(is.null(df) || (ncol(df) != 5+length(final_times) & all(is.na(df[,2])))){
df <- as.data.frame(matrix(data = NA, nrow = length(names_lst_models), ncol = 5+length(final_times)))
df[,1] <- names_lst_models
}
if(all(is.na(df[,2])) & ncol(df) < (5+length(final_times))){
colnames(df) <- c("method", "training.time","evaluating.time", "AIC", "c.index", "AUC")
df <- as.data.frame(df)
new_df <- tidyr::pivot_longer(df, cols = starts_with("time_"), names_to = "time", values_to = "AUC",)
new_df$time <- factor(new_df$time, levels = unique(new_df$time))
}else{
colnames(df) <- c("method", "training.time","evaluating.time", "AIC", "c.index", paste0("time_",final_times))
df <- as.data.frame(df)
df$method <- factor(df$method, levels = unique(df$method))
df[,!colnames(df) %in% "method"] <- apply(df[,!colnames(df) %in% "method"], 2, as.numeric)
new_df <- tidyr::pivot_longer(df, cols = starts_with("time_"), names_to = "time", values_to = "AUC",)
new_df$time <- factor(new_df$time, levels = unique(new_df$time))
}
t2 <- Sys.time()
time <- difftime(t2,t1,units = "mins")
if(verbose){
message(paste0("\nTime for ", pred.method, ": ", as.character(round(time, 5))))
}
lst_AUC
devtools::load_all(".")
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX-MixOmics" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = NULL, max_time_points = 15,
PARALLEL = T)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = T))
eval_results
#eval_results$cenROC
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model)
ggp_time <- plot_time.list(lst_models_time)
ggp_time
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot$`sPLS-DRCOX-MixOmics`
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.density
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.histogram
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`sPLS-DRCOX-MixOmics`
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3, verbose = F)
ggp.simulated_beta$`sPLS-DRCOX-MixOmics`$plot
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
new_pat <- X_test[1,,drop=F]
knitr::kable(Y_test[rownames(new_pat),])
ggp.simulated_beta_newPat <- plot_pseudobeta_newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
# ggp.simulated_beta_newPat <- plot_pseudobeta_newPatient(model = lst_models$`sPLS-DRCOX-MixOmics`,
#                                                         new_pat = new_pat,
#                                                         error.bar = T, onlySig = T, alpha = 0.05,
#                                                         zero.rm = T, auto.limits = T, show.betas = T, top = 20)
ggp.simulated_beta_newPat$`sPLS-DRCOX-MixOmics`$plot
pat_density <- plot_patient.eventDensity(patient = new_pat,
time = NULL,
model = lst_models$`sPLS-DRCOX-MixOmics`,
type = "lp")
pat_density
pat_histogram <- plot_patient.eventHistogram(patient = new_pat,
time = NULL,
model = lst_models$`sPLS-DRCOX-MixOmics`,
type = "lp")
pat_histogram
knitr::kable(Y_test[1:5,])
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
df.pat = X_test[1:5,]
error.bar = T
zero.rm = T
onlySig = T
alpha = 0.05
top = 5
model
auto.limits = T
top
#DFCALLS
value <- patients <- NULL
#plot
ggp.simulated_beta <- plot_pseudobeta(model = model, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm, auto.limits = auto.limits, top = top)
coefficients <- model$survival_model$coef
coefficients
coefficients <- coefficients[order(coefficients$value, decreasing = T),,drop=F]
coefficients <- coefficients[order(coefficients, decreasing = T),,drop=F]
coefficients <- coefficients[order(coefficients, decreasing = T)]
coefficients
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients #predict terms
})
lp.new_pat_variable
x
apply(norm_patient[,rownames(coefficients),drop=F]
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients #predict terms
})
lp.new_pat_variable
norm_patient[,rownames(coefficients),drop=F]
norm_patient
rownames(coefficients)
coefficients <- model$survival_model$coef
coefficients <- coefficients[order(coefficients, decreasing = T)]
coefficients
coefficients <- model$survival_model$coef
coefficients <- as.data.frame(coefficients)
coefficients
colnames(coefficients) <- "value"
coefficients <- coefficients[order(coefficients$value, decreasing = T),drop=F]
coefficients <- coefficients[order(coefficients$value, decreasing = T),,drop=F]
coefficients
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
coefficients
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,rownames(coefficients),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
norm_patient[,rownames(coefficients),drop=F]
norm_patient
rownames(coefficients)
deleteIllegalChars(rownames(coefficients))
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,deleteIllegalChars(rownames(coefficients)),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
lp.new_pat_variable
lp.pats <- norm_patient[,rownames(ggp.simulated_beta$beta)] %*% ggp.simulated_beta$beta$value
colnames(lp.pats) <- "linear predictor"
coefficients
model$survival_model$coef
names(model$survival_model$coef)
deleteIllegalChars(names(model$survival_model$coef))
lp.pats <- norm_patient[,deleteIllegalChars(names(model$survival_model$coef))] %*% model$survival_model$coef
colnames(lp.pats) <- "linear predictor"
lp.pats
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat))
accuracy <- 0.1
auto.limits.flag = T
sd.min <- ggp.simulated_beta$sd.min[rownames(coefficients),]
sd.max <- ggp.simulated_beta$sd.max[rownames(coefficients),]
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
ggp <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==F,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge") + xlab(label = "Variables")
ggp2 <- ggplot(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,], aes(x = var, y = value, fill = patients)) +
geom_bar(stat = "identity", position = "dodge")
ggp
ggp2
if(requireNamespace("RColorConesa", quietly = TRUE)){
ggp <- ggp + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
ggp2 <- ggp2 + RColorConesa::scale_fill_conesa(palette = "complete", continuous = F)
}
if(!auto.limits.flag){
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1))
ggp <- ggp + scale_y_continuous(n.breaks = 10)
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10)
}else{
#ggp <- ggp + scale_y_continuous(breaks=seq(-1*auto.limits, auto.limits, 0.1), limits = c(-1*auto.limits, auto.limits))
ggp <- ggp + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
ggp2 <- ggp2 + scale_y_continuous(n.breaks = 10, limits = c(-1*auto.limits, auto.limits))
}
if(length(unique(lp.new_pat_variable$var))>15){
ggp <- ggp + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggp2 <- ggp2 + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
}
res_all.plot <- ggp
res_lp.plot <- ggp2 + xlab(label = "")
ggp <- ggp + guides(fill = "none")
ggp2 <- ggp2 + ylab(label = "") + xlab(label = "")
pp <- ggpubr::ggarrange(ggp, ggp2, ncol = 2, widths = c(0.8, 0.2), align = "h")
pp
load_all()
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$`sPLS-DRCOX-MixOmics`$plot
lst_cox.comparison$`COX-EN`$plot
lst_cox.comparison$`sPLS-DRCOX-MixOmics`$lp.plot
lst_cox.comparison$`COX-EN`$lp.plot
lst_cox.comparison$`PLS-ICOX`$lp.plot
lst_cox.comparison$`sPLS-DRCOX`$lp.plot
lst_cox.comparison$`sPLS-DRCOX-MixOmics`$lp.plot
lst_cox.comparison$`sPLS-DACOX-MixOmics`$lp.plot
lst_cox.comparison$`COX-EN`$patients
lst_cox.comparison$`COX-EN`$lp.var
lst_cox.comparison$`COX-EN`$lp
devtools::load_all(".")
ggp_biplot <- plot_PLS_HDcox(model = lst_models$`sPLS-DRCOX-MixOmics`,
comp = c(1,2), mode = "biplot",
top = 15,
only_top = T,
overlaps = 10)
ggp_biplot$plot
ggp_biplot <- plot_PLS_HDcox(model = lst_models$`sPLS-DRCOX-MixOmics`,
comp = c(1,2), mode = "biplot",
top = 15,
only_top = T,
overlaps = 20)
ggp_biplot$plot
check()
model$survival_model$coef
model$survival_model$fit$coefficients
summary(model$survival_model$fit)
summary(model$survival_model$fit)[[7]]
df_cox_sd <- summary(model$survival_model)[[7]][,"se(coef)"]
summary(model$survival_model)[[7]]
summary(model$survival_model)
summary(model$survival_model$fit)
df_cox_sd <- summary(model$survival_model$fit)[[7]][,"se(coef)"]
df_cox_sd
coefficients
names(coefficients)
rownames(coefficients)
df_cox_sd
df_cox_sd[rownames(coefficients)]
coefficients
as.data.frame(df_cox_sd[rownames(coefficients)])
coefficients - as.data.frame(df_cox_sd[rownames(coefficients)])
??plot_patient.eventDensity
?predict.coxph
devtools::load_all(".")
check()
install()
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
devtools::load_all(".")
remove.packages("HDcox")
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
df.pat = X_test[1:5,]
error.bar = T
zero.rm = T
onlySig = T
alpha = 0.05
top = 5
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
plot_LP.multiplePatients(model = lst_models$`COX-EN`, df.pat = df.pat, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm,
auto.limits = auto.limits, top = top)
plot_LP.multiplePatients(model = lst_models$`PLS-ICOX`, df.pat = df.pat, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm,
auto.limits = auto.limits, top = top)
plot_LP.multiplePatients(model = lst_models$`COX-EN`, df.pat = df.pat, error.bar = error.bar, onlySig = onlySig,
alpha = alpha, zero.rm = zero.rm,
auto.limits = auto.limits, top = top)
model = lst_models$`COX-EN`
plot_classicalcox.comparePatients(model = model,
df.pat = df.pat,
error.bar = error.bar,
onlySig = onlySig, alpha = alpha,
zero.rm = zero.rm, top = top,
auto.limits = auto.limits)
top = NULL
top = 5
#DFCALLS
value <- patients <- NULL
coefficients <- model$survival_model$coef
coefficients <- as.data.frame(coefficients)
colnames(coefficients) <- "value"
coefficients <- coefficients[order(coefficients$value, decreasing = T),,drop=F]
if(!is.null(top)){
if(top < nrow(coefficients)){
aux_df <- coefficients
aux_df[,"value"] <- abs(aux_df[,"value",drop=F])
aux_df <- aux_df[order(aux_df[,"value",drop=T], decreasing = T),,drop=F]
aux_df <- aux_df[1:top,,drop=F]
coefficients <- coefficients[rownames(coefficients) %in% rownames(aux_df),,drop=F]
}
#norm patient
if(!is.null(model$X$x.mean) & !is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = model$X$x.sd)
}else if(!is.null(model$X$x.mean)){
norm_patient <- scale(df.pat, center = model$X$x.mean, scale = F)
}else if(!is.null(model$X$x.sd)){
norm_patient <- scale(df.pat, center = F, scale = model$X$x.sd)
}else{
norm_patient <- df.pat
}
#lp.new_pat_manual <- norm_patient[,rownames(coefficients)] %*% coefficients #predict lp
lp.new_pat_variable <- apply(norm_patient[,deleteIllegalChars(rownames(coefficients)),drop=F], 1, function(x){
x * coefficients$value #predict terms
})
lp.pats <- norm_patient[,deleteIllegalChars(names(model$survival_model$coef))] %*% model$survival_model$coef
colnames(lp.pats) <- "linear predictor"
rownames(lp.new_pat_variable) <- rownames(coefficients)
lp.new_pat_variable <- rbind(lp.new_pat_variable, lp.pats[,1])
rownames(lp.new_pat_variable)[nrow(lp.new_pat_variable)] <- "linear predictor"
lp.new_pat_variable <- as.data.frame(lp.new_pat_variable)
lp.new_pat_variable$var <- rownames(lp.new_pat_variable)
lp.new_pat_variable <- tidyr::pivot_longer(lp.new_pat_variable, !var, names_to = "patients", values_to = "value")
lp.new_pat_variable$var <- factor(lp.new_pat_variable$var, levels = unique(lp.new_pat_variable$var))
lp.new_pat_variable$lp.flag <- ifelse(lp.new_pat_variable$var == "linear predictor", T, F)
lp.new_pat_variable$lp.flag <- factor(lp.new_pat_variable$lp.flag)
lp.new_pat_variable$patients <- factor(lp.new_pat_variable$patients, levels = rownames(df.pat))
accuracy <- 0.1
auto.limits.flag = T
df_cox_sd <- summary(model$survival_model$fit)[[7]][,"se(coef)"]
sd.min <- coefficients - as.data.frame(df_cox_sd[rownames(coefficients)])
sd.max <- coefficients + as.data.frame(df_cox_sd[rownames(coefficients)])
auto.limits <- NULL
if(auto.limits.flag){
if(!is.null(sd.min) & !is.null(sd.max)){
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
}else{
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
}
}else{
auto.limits <- round2any(max(c(abs(sd.max), abs(sd.min), abs(lp.new_pat_variable$value))), accuracy = accuracy, f = ceiling)
}
sd.min
sd.max
auto.limits
auto.limits.flag
!is.null(sd.min) & !is.null(sd.max)
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_min <- round2any(x = max(c(abs(coefficients$value-sd.min$value),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits_max <- round2any(x = max(c(abs(coefficients$value+sd.max$value),abs(lp.new_pat_variable[lp.new_pat_variable$lp.flag==T,]$value))), accuracy = accuracy, f = ceiling)
auto.limits <- max(auto.limits_min, auto.limits_max)
auto.limits <- round2any(max(abs(lp.new_pat_variable$value)), accuracy = accuracy, f = ceiling)
devtools::load_all(".")
lst_cox.comparison <- plot_LP.multiplePatients.list(lst_models = lst_models,
df.pat = X_test[1:5,],
error.bar = T, zero.rm = T, onlySig = T, alpha = 0.05, top = 5)
lst_cox.comparison$`COX-EN`$plot
devtools::load_all(".")
check()
install()
remove.packages("HDcox")
