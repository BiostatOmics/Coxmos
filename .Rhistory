X.expr <- rna.filt.counts
X.miRNA <- mirna.filt.counts
X.prot <- prot
X.methyl <- mval
#observations in rows
X.clinical <- X.clinical
X.expr <- t(X.expr)
X.miRNA <- as.data.frame(t(X.miRNA))
X.prot <- t(X.prot)
X.methyl <- t(X.methyl)
X.clinical.indexProblems <- caret::nzv(x = X.clinical[,!colnames(X.clinical) %in% c("treatments", "disease_type")])
cn <- colnames(X.clinical[,!colnames(X.clinical) %in% c("treatments", "disease_type")])[X.clinical.indexProblems]
X.clinical <- X.clinical[,!colnames(X.clinical) %in% cn,drop=F]
var.toKeep <- c("sample_type", "days_to_collection", "initial_weight",
"oct_embedded",
#"synchronous_malignancy", == prior_malignancy
"ajcc_pathologic_stage",
"treatments",
"tissue_or_organ_of_origin",
"days_to_last_follow_up",
"prior_malignancy", "prior_treatment",
"ajcc_staging_system_edition",
#"morphology", - to spread
"site_of_resection_or_biopsy",
"gender", "ethnicity", "vital_status", "age_at_index",
#days_to_birth, year_of_birth, #correlated with age
"days_to_death")
X.clinical <- X.clinical[,colnames(X.clinical) %in% var.toKeep,drop=F]
#gender
which_male <- which(X.clinical$gender=="male") #deleting 9 males
X.clinical <- X.clinical[-which_male,]
X.clinical$gender <- NULL
#ajcc_pathologic_stage
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IA"),]$ajcc_pathologic_stage <- "Stage I"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IB"),]$ajcc_pathologic_stage <- "Stage I"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IIA"),]$ajcc_pathologic_stage <- "Stage II"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IIB"),]$ajcc_pathologic_stage <- "Stage II"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IIIA"),]$ajcc_pathologic_stage <- "Stage III"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IIIB"),]$ajcc_pathologic_stage <- "Stage III"
X.clinical[which(X.clinical$ajcc_pathologic_stage == "Stage IIIC"),]$ajcc_pathologic_stage <- "Stage III"
#oct_embedded
X.clinical$oct_embedded <- ifelse(X.clinical$oct_embedded=="false", F, T)
#prior_malignancy
X.clinical$prior_malignancy <- ifelse(X.clinical$prior_malignancy=="no", "No", ifelse(X.clinical$prior_malignancy=="yes", "Yes", "Not Reported"))
#treatment
treatment_type <- NULL
treatment_or_therapy <- NULL
created_datetime <- NULL
for(p in rownames(X.clinical)){
tr <- X.clinical[p,]$treatments
treatment_type <- c(treatment_type, paste0(tr[[1]]$treatment_type, collapse = ", "))
treatment_or_therapy <- c(treatment_or_therapy, paste0(tr[[1]]$treatment_or_therapy, collapse = ", "))
t.val <- tr[[1]]$created_datetime[!is.na(tr[[1]]$created_datetime)]
if(length(t.val)==0){t.val = NA}
created_datetime <- c(created_datetime, as.Date(t.val))
}
X.clinical$treatment_type <- treatment_type
X.clinical$treatment_or_therapy <- treatment_or_therapy
#X.clinical$created_datetime <- created_datetime
X.clinical$treatments <- NULL
#time/event
event <- ifelse(X.clinical$vital_status=="Alive", T, F)
time <- ifelse(!is.na(X.clinical$days_to_death), X.clinical$days_to_death, X.clinical$days_to_last_follow_up)
X.clinical$days_to_death <- NULL
X.clinical$days_to_last_follow_up <- NULL
X.clinical$vital_status <- NULL
for(cn in colnames(X.clinical)){
if(class(X.clinical[,cn]) %in% c("character", "logical")){
X.clinical[,cn] <- factor(X.clinical[,cn])
}else if(class(X.clinical[,cn])=="integer"){
X.clinical[,cn] <- as.numeric(X.clinical[,cn])
}
Y.ori <- data.frame(time = time, event = event)
rownames(Y.ori) <- rownames(X.clinical)
Y.ori <- Y.ori[!is.na(Y.ori$time),]
#delete negative times
Y.ori <- Y.ori[-which(Y.ori$time<0),]
#mv
any(is.na(Y.ori))
rn.X.clinical <-unlist(lapply(rownames(X.clinical), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rn.X.expr <-unlist(lapply(rownames(X.expr), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rn.X.miRNA <-unlist(lapply(rownames(X.miRNA), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rn.X.prot <-unlist(lapply(rownames(X.prot), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rn.X.methyl <-unlist(lapply(rownames(X.methyl), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rn.Y.ori <-unlist(lapply(rownames(Y.ori), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rownames(X.clinical) <- rn.X.clinical
rownames(X.expr) <- rn.X.expr
rownames(X.miRNA) <- rn.X.miRNA
rownames(X.prot) <- rn.X.prot
rownames(X.methyl) <- rn.X.methyl
Y.ori[which(startsWith(rownames(Y.ori), "TCGA-A7-A13D-01A")),]
Y.ori[which(startsWith(rownames(Y.ori), "TCGA-A7-A13E-01A")),]
Y.ori[which(startsWith(rownames(Y.ori), "TCGA-A7-A26E-01A")),]
Y.ori[which(startsWith(rownames(Y.ori), "TCGA-A7-A26J-01A")),]
pat2delete <- c(which(startsWith(rownames(Y.ori), "TCGA-A7-A13D-01A"))[2],
which(startsWith(rownames(Y.ori), "TCGA-A7-A13E-01A"))[2],
which(startsWith(rownames(Y.ori), "TCGA-A7-A26E-01A"))[2],
which(startsWith(rownames(Y.ori), "TCGA-A7-A26J-01A"))[2])
Y.ori <- Y.ori[-pat2delete,]
rn.Y.ori <-unlist(lapply(rownames(Y.ori), function(x){paste0(strsplit(x, split = "-")[[1]][1:4], collapse = "-")}))
rownames(Y.ori) <- unique(rn.Y.ori)
if(any(is.na(X.clinical))){
X <- X.clinical
X <- X[rownames(X) %in% rownames(Y.ori),]
aux <- delete_PATorVAR(data = X, VAL_NAMAX = 0.1, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = F, ONLY_VAR = T, verbose = F)
aux <- delete_PATorVAR(data = aux$filtered_data, VAL_NAMAX = 0, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = T, ONLY_VAR = F, verbose = F)
X.clinical <- aux$filtered_data
}
rownames(X.clinical)
if(any(is.na(X.expr))){
X <- X.expr
X <- X[rownames(X) %in% rownames(Y.ori),]
aux <- delete_PATorVAR(data = X, VAL_NAMAX = 0.1, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = F, ONLY_VAR = T, verbose = F)
aux <- delete_PATorVAR(data = aux$filtered_data, VAL_NAMAX = 0, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = T, ONLY_VAR = F, verbose = F)
X.expr <- aux$filtered_data
}
if(any(is.na(X.miRNA))){
X <- X.miRNA
X <- X[rownames(X) %in% rownames(Y.ori),]
aux <- delete_PATorVAR(data = X, VAL_NAMAX = 0.1, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = F, ONLY_VAR = T, verbose = F)
aux <- delete_PATorVAR(data = aux$filtered_data, VAL_NAMAX = 0, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = T, ONLY_VAR = F, verbose = F)
X.miRNA <- aux$filtered_data
}
if(any(is.na(X.prot))){
X <- X.prot
X <- X[rownames(X) %in% rownames(Y.ori),]
aux <- delete_PATorVAR(data = X, VAL_NAMAX = 0.1, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = F, ONLY_VAR = T, verbose = F)
aux <- delete_PATorVAR(data = aux$filtered_data, VAL_NAMAX = 0, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = T, ONLY_VAR = F, verbose = F)
X.prot <- aux$filtered_data
}
if(any(is.na(X.methyl))){
X <- X.methyl
X <- X[rownames(X) %in% rownames(Y.ori),]
aux <- delete_PATorVAR(data = X, VAL_NAMAX = 0.1, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = F, ONLY_VAR = T, verbose = F)
aux <- delete_PATorVAR(data = aux$filtered_data, VAL_NAMAX = 0, VAR_NA_KEEP = NULL, MIN_N_PAT = 50, ONLY_PAT = T, ONLY_VAR = F, verbose = F)
X.methyl <- aux$filtered_data
}
Y.clinical <- Y.ori[rownames(Y.ori) %in% rownames(X.clinical),]
Y.expr <- Y.ori[rownames(Y.ori) %in% rownames(X.expr),]
Y.miRNA <- Y.ori[rownames(Y.ori) %in%  rownames(X.miRNA),]
Y.methyl <- Y.ori[rownames(Y.ori) %in% rownames(X.methyl),]
Y.prot <- Y.ori[rownames(Y.ori) %in% rownames(X.prot),]
X.clinical <- X.clinical[rownames(Y.clinical),]
X.expr <- X.expr[rownames(Y.expr),]
X.miRNA <- X.miRNA[rownames(Y.miRNA),]
X.methyl <- X.methyl[rownames(Y.methyl),]
X.prot <- X.prot[rownames(Y.prot),]
rownames(Y.clinical)
########
# SAVE #
########
setwd("D:/Pedro/Mega/Doctorado/Otros proyectos/Data/MO/")
save(file = "X.clinical.RData", X.clinical)
save(file = "Y.clinical.RData", Y.clinical)
XY.clinical = cbind(X.clinical,Y.clinical)
XY.clinical$event <- factor(XY.clinical$event, levels = c("FALSE", "TRUE"))
save(file = "XY.clinical.RData", XY.clinical)
### LOAD YOUR NEW DATA
load("D:/Pedro/Mega/Doctorado/Otros proyectos/Data/MO/4.Exploratoy_Analysis/ExploratoryAnalysis.output.RData")
### LOAD YOUR NEW DATA
load("D:/Pedro/Mega/Doctorado/Otros proyectos/Data/TCGA Breast MO/4.Exploratoy_Analysis/ExploratoryAnalysis.output.RData")
newX <- cbind(as.data.frame(LST_VAR$Data$d.cual.binary), as.data.frame(LST_VAR$Data$d.num))
## T2
t2_pat <- RES_PCA_T2$Data$lst_outlier$`0.999`$ID
## SSR
ssr_pat <- RES_PCA_SSR$Data$lst_outlier$`0.999`$ID
to_delete <- unique(c(t2_pat, ssr_pat))
to_delete
newX <- newX[!rownames(X) %in% to_delete,]
newY <- Y.clinical[rownames(newX),]
!colnames(newX) %in% colnames(newY)
!rownames(X) %in% to_delete
rownames(Y.clinical) %in% rownames(newX)
newY <- Y.clinical[rownames(Y.clinical) %in% rownames(newX),]
newX <- newX[rownames(newY),]
dim(newX)
dim(newY)
X.clinical <- newX[,!colnames(newX) %in% colnames(newY)]
X.clinical <- X.clinical[,!startsWith(colnames(X.clinical), "event")]
X.clinical <- X.clinical[,!colnames(X.clinical) %in% "time"]
Y.clinical <- Y.clinical[rownames(newX),]
rownames(X.clinical)
rownames(Y.clinical)
all(rownames(X.clinical) %in% rownames(Y.clinical))
all(rownames(X.expr) %in% rownames(Y.expr))
all(rownames(X.miRNA) %in% rownames(Y.miRNA))
all(rownames(X.prot) %in% rownames(Y.prot))
all(rownames(X.methyl) %in% rownames(Y.methyl))
save(file = "data_breast.mo.RData", list = c("X.clinical", "Y.clinical", "X.expr", "Y.expr", "X.miRNA", "Y.miRNA", "X.prot", "Y.prot"))
save(file = "data_breast.mo.full.RData", list = c("X.clinical", "Y.clinical", "X.expr", "Y.expr", "X.miRNA", "Y.miRNA", "X.methyl", "Y.methyl","X.prot", "Y.prot"))
library(RColorConesa) #from GitHub #devtools #usethis and get install.packages('hrbrthemes', repos='http://cran.us.r-project.org')
#Load ggplot theme
loadGgplotTheme <- function(path){
file <- paste0(path,"ggplot_theme.R")
source(file, echo = F)
}
path <- "D:/Pedro/Mega/Doctorado/Otros proyectos/"
loadGgplotTheme(path)
load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_breast.mo.RData")
X <- X.clinical
Y <- Y.clinical
NAME = "BREAST_CLINICAL_"
# METHODS
lst_evaluations <- c("survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I", "risksetROC")
names(lst_evaluations) <- lst_evaluations
# Classical
FLAG_COX = T
FLAG_COXSW = T
# hd
FLAG_COXEN = T
FLAG_PLSICOX = T
FLAG_sPLSDRCOX = T
FLAG_sPLSDRCOX_MO = T
FLAG_sPLSDACOX_MO = T
# mo
FLAG_SB.PLSICOX = F
FLAG_FAST.SB.PLSICOX = F
FLAG_SB.sPLSDRCOX = F
FLAG_FAST.SB.sPLSDRCOX = F
FLAG_MB.sPLSDRCOX = F
FLAG_MB.sPLSDACOX = F
# Scale Parameters
x.center = T
x.scale = T
y.center = F
y.scale = F
# Survival Parameters
MIN_EPV = 5
pred.attr = "mean"
# Algorithm Parameters
remove_non_significant = T
remove_non_significant_models = F
remove_near_zero_variance = T
remove_zero_variance = F
toKeep.zv = NULL
alpha = 0.05
returnData = T
verbose = T
PARALLEL = T
# cox
FORCE = T
# SW
boostDeletion = F
BACKWARDS = T
initialModel = "NULL"
toKeep.sw = NULL
alpha_ENT = 0.1
alpha_OUT = 0.15
alpha_PH  = 0.05
check_PH = F
# coxEN
EN.alpha.list = seq(0,1,0.1)
# PLS
max.ncomp = 10
max.iter = 500
# Cross Validation Parameters
times = NULL
return_models = F
seed = 123
# Weights Parameters
w_AIC = 0
w_c.index = 0
w_AUC = 1
# sPLS-DR-cox
eta.list = seq(0,0.9,0.25)
# mixOmics
vector = NULL
MIN_NVAR = 10
MAX_NVAR = 1000
n.cut_points = 5
EVAL_METHOD = "cenROC"
# Eval stop detection
MIN_AUC_INCREASE = 0.01 # 1%
MIN_AUC = 0.75 # 75%
MIN_COMP_TO_CHECK = 3
# Model Lists
lst_models_full <- NULL
lst_models <- NULL
lst_models_pls <- NULL
# Evaluation multiple models
max_time_points = 15
#### ### ### #### ### ### ###
#Cross Validation Parameters #
#### ### ### ### ### #### ###
n_run = 5
k_folds = 10
fast_mode = F
pred.method = "cenROC"
todaydate <- format(Sys.time(), '%Y-%m-%d')
txt_folder <- paste0(NAME,ifelse(fast_mode, "FAST_", "COMPLETE_"), pred.method, "_runs_", n_run, "_folds_", k_folds)
folder <- paste0(txt_folder,"_",todaydate,"/")
#setwd("D:/Pedro/Mega/Doctorado/Otros proyectos/plsicox/results")
dir.create(folder)
#### ### ### ### ###
#Set Train and Test#
#### ### ### ### ###
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
### ###
# COX #
### ###
if(FLAG_COX){
aux_folder = paste0(folder, "cox_plot/")
dir.create(aux_folder)
best_cox <- cox(X = X_train, Y = Y_train,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
FORCE = FORCE,
returnData = returnData,
verbose = verbose)
save(list = c("best_cox"), file = paste0(aux_folder, "cox.RData"))
gc()
lst_models_full[[best_cox$class]] = best_cox
lst_models[[best_cox$class]] = best_cox
}
X <- X.expr
Y <- Y.expr
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
FLAG_COX
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = EN.alpha.list, #EN penalization
max.variables = ncol(X_train),
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
#### ### ### ### ### ### #
# UPDATING GLOBALS SIZE #
#### ### ### ### ### ### #
MB = 4000
MB = MB*1024^2
MB
MB*1024
#### ### ### ### ### ### #
# UPDATING GLOBALS SIZE #
#### ### ### ### ### ### #
MB = 4000
1024^2
devtools::load_all(".")
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
EN.alpha.list = EN.alpha.list, #EN penalization
max.variables = ncol(X_train),
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL,
verbose = verbose)
library(RColorConesa) #from GitHub #devtools #usethis and get install.packages('hrbrthemes', repos='http://cran.us.r-project.org')
devtools::load_all(".")
#Load ggplot theme
loadGgplotTheme <- function(path){
file <- paste0(path,"ggplot_theme.R")
source(file, echo = F)
}
path <- "D:/Pedro/Mega/Doctorado/Otros proyectos/"
loadGgplotTheme(path)
load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_GBM.mo.RData")
X <- X.mirna
Y <- Y.mirna
NAME = "TCGA_MIRNA_"
# METHODS
lst_evaluations <- c("survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I", "risksetROC")
names(lst_evaluations) <- lst_evaluations
# Classical
FLAG_COX = F
FLAG_COXSW = F
# hd
FLAG_COXEN = T
FLAG_PLSICOX = T
FLAG_sPLSDRCOX = T
FLAG_sPLSDRCOX_MO = T
FLAG_sPLSDACOX_MO = T
FLAG_SB.PLSICOX = F
FLAG_FAST.SB.PLSICOX = F
FLAG_SB.sPLSDRCOX = F
FLAG_FAST.SB.sPLSDRCOX = F
FLAG_MB.sPLSDRCOX = F
FLAG_MB.sPLSDACOX = F
# Scale Parameters
x.center = T
x.scale = T
y.center = F
y.scale = F
# Survival Parameters
MIN_EPV = 5
pred.attr = "mean"
# Algorithm Parameters
remove_non_significant = T
remove_non_significant_models = F
remove_near_zero_variance = T
remove_zero_variance = F
toKeep.zv = NULL
alpha = 0.05
returnData = T
verbose = T
PARALLEL = T
# cox
FORCE = T
# SW
boostDeletion = F
BACKWARDS = T
initialModel = "NULL"
toKeep.sw = NULL
alpha_ENT = 0.1
alpha_OUT = 0.15
alpha_PH  = 0.05
check_PH = F
# coxEN
EN.alpha.list = seq(0,1,0.1)
# PLS
max.ncomp = 10
max.iter = 500
# Cross Validation Parameters
times = NULL
return_models = F
seed = 123
# Weights Parameters
w_AIC = 0
w_c.index = 0
w_AUC = 1
# sPLS-DR-cox
eta.list = seq(0,0.9,0.25)
# mixOmics
vector = NULL
MIN_NVAR = 10
MAX_NVAR = 1000
n.cut_points = 5
EVAL_METHOD = "cenROC"
# Eval stop detection
MIN_AUC_INCREASE = 0.01 # 1%
MIN_AUC = 0.75 # 75%
MIN_COMP_TO_CHECK = 3
# Model Lists
lst_models_full <- NULL
lst_models <- NULL
lst_models_pls <- NULL
# Evaluation multiple models
max_time_points = 15
#### ### ### #### ### ### ###
#Cross Validation Parameters #
#### ### ### ### ### #### ###
n_run = 5
k_folds = 10
fast_mode = F
pred.method = "cenROC"
todaydate <- format(Sys.time(), '%Y-%m-%d')
txt_folder <- paste0(NAME,ifelse(fast_mode, "FAST_", "COMPLETE_"), pred.method, "_runs_", n_run, "_folds_", k_folds)
folder <- paste0(txt_folder,"_",todaydate,"/")
#setwd("D:/Pedro/Mega/Doctorado/Otros proyectos/plsicox/results")
dir.create(folder)
#### ### ### ### ###
#Set Train and Test#
#### ### ### ### ###
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,]
Y_train <- Y[index_train,]
X_test <- X[-index_train,]
Y_test <- Y[-index_train,]
best_splsdrcox <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 2,
eta = 0,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
remove_near_zero_variance = remove_near_zero_variance,
remove_zero_variance = remove_zero_variance,
toKeep.zv = toKeep.zv,
remove_non_significant = remove_non_significant,
alpha = alpha,
MIN_EPV = MIN_EPV,
returnData = returnData,
verbose = verbose)
best_splsdrcox$survival_model$fit
