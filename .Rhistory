cv.coxen_res #1.3min.
cv.coxen_res$time
cv.coxen_res$opt.nvar
cv.coxen_res$opt.EN.alpha
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 47, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = F, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
coxen_model <- coxEN(X = X_train, Y = Y_train,
EN.alpha = 0, #cv.coxen_res$opt.EN.alpha
max.variables = 47, #cv.coxen_res$opt.nvar
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant = T, alpha = 0.05,
MIN_EPV = 5, returnData = T, verbose = F)
coxen_model
# run cv.plsicox
cv.plsicox_res <- cv.plsicox(X = X_train, Y = Y_train,
max.ncomp = 10,
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0, w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.plsicox_res #3.6min.
cv.plsicox_res$time
plsicox_model <- plsicox(X = X_train, Y = Y_train,
n.comp = 3, #n.comp = cv.plsicox_res$opt.comp
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
tol = 500,
MIN_EPV = 5, returnData = T, verbose = F)
plsicox_model
seq(0,0.9,0.25)
# run cv.splsdrcox
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = Y_train,
max.ncomp = 10, eta.list = seq(0,0.9,0.25), #penalty
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.splsdrcox_res #23.3min
cv.splsdrcox_res$time
# plot cv.plsicox
cv.splsdrcox_res$plot_AUC
splsdrcox_model <- splsdrcox(X = X_train, Y = Y_train,
n.comp = 1, eta = 0.75, #n.comp = cv.splsdrcox_res$opt.comp, eta = cv.splsdrcox_res$opt.eta
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_model
# run cv.splsdrcox
cv.splsdrcox_mo_res <- cv.splsdrcox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = 10, vector = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 10, EVAL_METHOD = "cenROC",
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.splsdrcox_mo_res #2.35mins
cv.splsdrcox_mo_res$time
cv.splsdrcox_mo_res$plot_AUC
cv.splsdrcox_mo_res$df_results_runs
cv.splsdrcox_mo_res$df_results_folds
splsdrcox_mo_model <- splsdrcox_mixOmics(X = X_train, Y = Y_train,
n.comp = 2, vector = 534,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 5,
MIN_AUC_INCREASE = 0.01,
EVAL_METHOD = "AUC", pred.method = "cenROC", max.iter = 200,
MIN_EPV = 5, returnData = T, verbose = F)
splsdrcox_mo_model
# run cv.splsdrcox
cv.splsdacox_res <- cv.splsdacox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = 10,  vector = NULL,
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.splsdacox_res #2min
cv.splsdacox_res$time
# run cv.splsdrcox
cv.splsdacox_res <- cv.splsdacox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = 10,  vector = NULL,
MIN_NVAR = 20, MAX_NVAR = 1000, n.cut_points = 10, EVAL_METHOD = "cenROC",
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.splsdacox_res #4min
# run cv.splsdrcox
cv.splsdacox_res <- cv.splsdacox_mixOmics(X = X_train, Y = Y_train,
max.ncomp = 10,  vector = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 10, EVAL_METHOD = "cenROC",
n_run = 2, k_folds = 10,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
remove_non_significant_models = F, alpha = 0.05,
w_AIC = 0,  w_c.index = 0, w_AUC = 1, times = NULL,
MIN_AUC_INCREASE = 0.05, MIN_AUC = 0.8, MIN_COMP_TO_CHECK = 3,
pred.attr = "mean", pred.method = "cenROC", fast_mode = F,
MIN_EPV = 5, return_models = F,
PARALLEL = T, verbose = F, seed = 123)
cv.splsdacox_res #4min
splsdacox_mo_model <- splsdacox_mixOmics(X = X_train, Y = Y_train,
n.comp = 6, vector = 184,
x.center = T, x.scale = F,
y.center = F, y.scale = F,
remove_near_zero_variance = T, remove_zero_variance = F, toKeep.zv = NULL,
MIN_NVAR = 10, MAX_NVAR = 1000, n.cut_points = 5,
MIN_AUC_INCREASE = 0.01,
EVAL_METHOD = "AUC", pred.method = "cenROC", max.iter = 200,
MIN_EPV = 5, returnData = T, verbose = F)
splsdacox_mo_model
lst_models <- list("COX-EN" = coxen_model,
"PLS-ICOX" = plsicox_model,
"sPLS-DRCOX" = splsdrcox_model,
"sPLS-DRCOX-MixOmics" = splsdrcox_mo_model,
"sPLS-DACOX-MixOmics" = splsdacox_mo_model)
eval_results <- eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test,
pred.method = "cenROC",
pred.attr = "mean",
times = NULL, max_time_points = 15,
PARALLEL = T)
# lst_evaluators <- c(cenROC = "cenROC",
#                     risksetROC = "risksetROC")
#
# eval_results <- purrr::map(lst_evaluators, ~eval_models4.0(lst_models = lst_models,
#                                                            X_test = X_test, Y_test = Y_test,
#                                                            pred.method = .,
#                                                            pred.attr = "mean",
#                                                            times = seq(1,4,0.5), max_time_points = 15,
#                                                            PARALLEL = T))
eval_results
#eval_results$cenROC
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot
load_all()
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plots$lineplot
load_all()
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
devtools::load_all("D:/Pedro/Mega/Doctorado/Otros proyectos/R/HDcox")
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
devtools::load_all("D:/Pedro/Mega/Doctorado/Otros proyectos/R/HDcox")
check()
save.image("C:/Users/pedro/Desktop/vignette.RData")
library(devtools)
load_all()
load("C:/Users/pedro/Desktop/vignette.RData")
lst_eval_results <- plot_evaluation(eval_results)
#lst_eval_results <- plot_evaluation.list(eval_results)
lst_eval_results$lst_plots$lineplot.mean
lst_eval_results$lst_plot_comparisons$anova
# lst_eval_results$cenROC$lst_plots$lineplot.mean
# lst_eval_results$cenROC$lst_plot_comparisons$t.test
lst_eval_results$lst_plots$lineplot
lst_eval_results$lst_plot_comparisons$anova
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model)
ggp_time <- plot_time.list(lst_models_time)
ggp_time
x.text = "Method"
y.text = NULL
lst_models_time <- list(coxen_model,
plsicox_model,
splsdrcox_model,
splsdrcox_mo_model,
splsdacox_mo_model)
if(is.null(names(lst_models))){
names(lst_models) <- unlist(lapply(lst_models, function(x){
if("time" %in% names(x)){
attr(x, "model")
}else if("time" %in% names(x[[1]])){
attr(x[[1]], "model")
}
}))
}
lst_times <- list()
for(m in names(lst_models)){
if(isa(lst_models[[m]],pkg.env$model_class)){
lst_times[[m]] <- lst_models[[m]]$time
}else if(isa(lst_models[[m]][[1]],pkg.env$model_class)){
eval_sum <- lst_models[[m]][[1]]$time
if(length(lst_models[[m]])>1){
for(i in 2:length(lst_models[[m]])){
eval_sum <- eval_sum + lst_models[[m]][[i]]$time
}
lst_times[[m]] <- eval_sum
}
total_time <- lst_times[[1]]
if(length(lst_times)>1){
for(m in 2:length(lst_times)){
total_time <- total_time + lst_times[[m]]
}
lst_times$Total <- total_time
df.times <- do.call(rbind.data.frame, lst_times)
colnames(df.times) <- "times"
df.times$method <- names(lst_times)
rownames(df.times) <- NULL
roundTo = 0
max.breaks = 10
if(roundTo == 0){
#select the decimals of Y
if(length(grep("\\.", df.times$times))>0){
ch <- gsub("\\.", "", as.character(min(df.times$times)/max.breaks))
cont = 0
for(c in 1:nchar(ch)){
if(substr(ch,c,c) == "0"){
cont = cont + 1
}else{
break
}
roundTo = 1*10^-cont
}else{
roundTo = 0.1
}
breaks_size = round2any(max(df.times$times), roundTo, f = ceiling) / max.breaks
breaks = seq(0, max(df.times$times)+breaks_size, by=breaks_size)
accuracy <- roundTo
max <- max(breaks)
df.times$times <- round(df.times$times, digits = 4)
x.var = "method"
y.var = "times"
x.color = "method"
x.text = x.text
y.text
lst_times
lst_times$Total
attr(lst_times[["total"]], "units")
class(attr(lst_times[["total"]], "units"))
class(lst_times[["total"]])
lst_times[["total"]]
lst_times
attr(lst_times[["Total"]], "units")
load_all()
ggp_time <- plot_time.list(lst_models_time)
ggp_time
lst_forest_plot <- plot_forest.list(lst_models)
lst_forest_plot$`sPLS-DACOX-MixOmics`
lst_forest_plot$`sPLS-DRCOX-MixOmics`
density.plots.lp <- plot_cox.event.list(lst_models, type = "lp")
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.density
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.histogram
density.plots.lp$`sPLS-DACOX-MixOmics`$plot.density
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.density
density.plots.lp$`sPLS-DRCOX-MixOmics`$plot.histogram
lst_ph_ggplot <- plot_proportionalHazard.list(lst_models)
lst_ph_ggplot$`sPLS-DRCOX-MixOmics`
ggp_scores <- plot_PLS_HDcox(model = lst_models$`sPLS-DRCOX-MixOmics`,
comp = c(1,2), mode = "scores")
ggp_scores$plot
ggp_loadings <- plot_PLS_HDcox(model = lst_models$`sPLS-DRCOX-MixOmics`,
comp = c(1,2), mode = "loadings",
top = 10) #length from 0,0
ggp_loadings$plot
ggp_biplot <- plot_PLS_HDcox(model = lst_models$`sPLS-DRCOX-MixOmics`,
comp = c(1,2), mode = "biplot",
top = 15,
only_top = T)
ggp_biplot$plot
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3)
lst_models
purrr::map(lst_models, class) %in% pkg.env$pls_methods)
purrr::map(lst_models, class) %in% pkg.env$pls_methods
purrr::map(lst_models, class)
purrr::map(lst_models, function(x){x.$class})
purrr::map(lst_models, .$class)
purrr::map(lst_models, function(x){.$class}
)
purrr::map(lst_models, function(x){x$class})
unlist(purrr::map(lst_models, function(x){x$class}))
all(unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods)
unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods
sub_lst_models <- lst_models[unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods]
length(sub_lst_models)
sub_lst_models
lst_models[!unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods]
names(lst_models[!unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods])
message(paste0("Model ", paste0(names(lst_models[!unlist(purrr::map(lst_models, function(x){x$class})) %in% pkg.env$pls_methods]), collapse = ", "), " are not based in PLS methodology."))
load_all()
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3)
devtools::load_all(".")
ggp.simulated_beta <- plot_pseudobeta.list(lst_models = lst_models,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, top = 20,
show_percentage = T, size_percentage = 3)
ggp.simulated_beta$`sPLS-DRCOX-MixOmics`$plot
?plot_pseudobeta.list
?HDcox::plot_pseudobeta.list()
lst_models$`sPLS-DRCOX-MixOmics`
lst_models$`sPLS-DRCOX-MixOmics`$n.comp
lst_models["sPLS-DRCOX-MixOmics"]$n.comp
lst_models[["sPLS-DRCOX-MixOmics"]]$n.comp
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star
colSum(lst_models$`sPLS-DRCOX-MixOmics`$X$W.star)
colSusm(lst_models$`sPLS-DRCOX-MixOmics`$X$W.star)
colSums(lst_models$`sPLS-DRCOX-MixOmics`$X$W.star)
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star[,"hsa-miR-182"]
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star["hsa-miR-182",]
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star["hsa-miR-143",]
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star["hsa-miR-137",]
lst_models$`sPLS-DRCOX-MixOmics`$X$W.star["hsa-miR-222",]
ggp.simulated_beta$`sPLS-DRCOX-MixOmics`$beta
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
type = "LP"
lst_models = lst_models
comp = 1:4
top = 10
ori_data = T
BREAKTIME = NULL
alpha = 0.05
only_sig = T
if(!type %in% c("LP", "COMP", "VAR")){
stop("Type parameters must be one of the following: LP, COMP or VAR")
}
if(type == "LP"){
lst <- purrr::map(lst_models, ~getLPKM(model = ., comp = comp, top = top, ori_data = ori_data, BREAKTIME = BREAKTIME, only_sig = only_sig, alpha = alpha, title = title, verbose = verbose))
}else if(type == "COMP"){
lst <- purrr::map(lst_models, ~getCompKM(model = ., comp = comp, top = top, ori_data = ori_data, BREAKTIME = BREAKTIME, only_sig = only_sig, alpha = alpha, title = title, verbose = verbose))
}else{
lst <- purrr::map(lst_models, ~getVarKM(model = ., comp = comp, top = top, ori_data = ori_data, BREAKTIME = BREAKTIME, only_sig = only_sig, alpha = alpha, title = title, verbose = verbose))
}
model = lst_models$`PLS-ICOX`
if(attr(model, "model") %in% c(pkg.env$classical_methods, pkg.env$pls_methods, pkg.env$multiblock_methods)){
if(all(is.null(model$survival_model))){
if(verbose){
message("Survival cox model not found")
}
return(NA)
}
}else{
if(verbose){
message("Model not have components or is not a HDcox object.")
}
return(NA)
}
#select data
vars_data <- as.data.frame(model$survival_model$lp)
rownames(vars_data) <- rownames(model$X$data)
colnames(vars_data) <- "LP"
vars_num <- vars_data
if(all(dim(vars_num)>0)){
info_logrank_num <- getLogRank_NumVariables(data = vars_num, sdata = data.frame(model$Y$data), VAR_EVENT = "event", name_data = NULL, minProp = 0.1, ROUND_CP = 4)
}else{
info_logrank_num <- NULL
}
if(is.null(BREAKTIME)){
BREAKTIME <- (max(model$Y$data[,"time"]) - min(model$Y$data[,"time"])) / 20
}
d <- info_logrank_num$df_numASqual
v_names <- info_logrank_num$df_nvar_lrtest[,1:2]
LST_SPLOT <- plot_survivalplot.qual(data = d,
sdata = data.frame(model$Y$data),
BREAKTIME = BREAKTIME,
cn_variables = v_names$Variable,
name_data = NULL, title = title)
load_all()
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
LST_KM_RES_COMP <- getAutoKM.list(type = "COMP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_1
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_2
LST_KM_RES_VAR <- getAutoKM.list(type = "VAR",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_VAR$`sPLS-DRCOX-MixOmics`$LST_PLOTS$hsa_miR_222
LST_KM_RES_VAR$`sPLS-DRCOX-MixOmics`$LST_PLOTS$hsa_miR_182
LST_KM_RES_VAR$`sPLS-DRCOX-MixOmics`$LST_PLOTS
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = F,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
LST_KM_RES_LP <- getAutoKM.list(type = "LP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = T, alpha = 0.05)
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
load_all()
devtools::load_all(".")
LST_KM_RES_COMP <- getAutoKM.list(type = "COMP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
n.breaks = 5,
only_sig = T, alpha = 0.05)
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_1
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_2
LST_KM_RES_COMP <- getAutoKM.list(type = "COMP",
lst_models = lst_models,
comp = 1:4,
top = 10,
ori_data = T,
BREAKTIME = NULL,
n.breaks = 20,
only_sig = T, alpha = 0.05)
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_1
LST_KM_RES_COMP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$comp_2
new_pat <- X_test[1,,drop=F]
knitr::kable(Y_test[rownames(new_pat),])
ggp.simulated_beta_newPat <- plot_pseudobeta_newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
devtools::load_all(".")
ggp.simulated_beta_newPat <- plot_pseudobeta_newPatient.list(lst_models = lst_models,
new_pat = new_pat,
error.bar = T, onlySig = T, alpha = 0.05,
zero.rm = T, auto.limits = T, show.betas = T, top = 20)
ggp.simulated_beta_newPat$`sPLS-DRCOX-MixOmics`$plot
LST_KM_RES_LP$`sPLS-DRCOX-MixOmics`$LST_PLOTS$LP
ggp.simulated_beta$`sPLS-DRCOX-MixOmics`$plot
ggp.simulated_beta_newPat$`sPLS-DRCOX-MixOmics`$plot
knit_with_parameters("D:/Pedro/Mega/Doctorado/Otros proyectos/COVID19/scripts/1.Harmonization_Problems.Rmd")
save.image("C:/Users/pedro/Desktop/vignette.RData")
library(devtools)
