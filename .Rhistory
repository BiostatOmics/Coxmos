##############
# EVALUATION #
##############
lst_evaluations <- c("survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I", "risksetROC")
names(lst_evaluations) <- lst_evaluations
lst_models <- list("cox" = best_cox,
"coxSW" = best_coxSW,
"coxEN" = best_coxEN,
"plsicox" = best_plsicox,
"splsdrcox" = best_splsdrcox,
"splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"plsdacox_mixOmics" = best_plsdacox_mixOmics)
eval_results <- purrr::map(lst_evaluations, ~eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test, pred.method = .,
pred.attr = pred.attr,
times = times, max_time_points = 15, PARALLEL = PARALLEL))
eval_results$cenROC$df
#############
# EVALPLOTS #
#############
evaluation_folder = paste0(folder, "evaluation_plot/")
lst_ggp <- plot.multiple.evaluations(eval_results)
lst_ggp$cenROC$lineplot.mean
########
# TIME #
########
time_folder = paste0(folder, "time_plot/")
lst_models <- list(best_cox,
best_coxSW,
cv.coxEN_res,
cv.plsicox_res,
cv.splsdrcox_res,
cv.splsdrcox_mixOmics_res,
cv.plsdacox_mixOmics_res,
eval_results)
ggp_time <- models.time.plot(lst_models)
ggp_time
detach("package:RColorConesa", unload = TRUE)
ggp_time <- models.time.plot(lst_models)
ggp_time
density_folder = paste0(folder, "density_plot/")
lst_models <- list("best_cox" = best_cox,
"best_coxSW" = best_coxSW,
"best_coxEN" = best_coxEN,
"best_plsicox" = best_plsicox,
"best_splsdrcox" = best_splsdrcox,
"best_splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"best_plsdacox_mixOmics" = best_plsdacox_mixOmics)
for(m in names(lst_models)){
if(all(is.null(lst_models[[m]]$survival_model))){
lst_models[[m]] <- NULL
}
density.plots.lp <- purrr::map(lst_models, ~eventDensityByLP.plot(., type = "lp"))
density.plots.lp$best_cox$plot.density
density.plots.lp$best_cox$plot.histogram
density.plots.lp$best_plsdacox_mixOmics$plot.density
#################
## FOREST PLOTS #
#################
forest_folder = paste0(folder, "forest_plot/")
lst_forest_plot <- purrr::map(lst_models, ~survminer::ggforest(.$survival_model$fit, data = .$survival_model$fit$model))
lst_forest_plot$best_plsdacox_mixOmics
lst_forest_plot$best_cox
lst_forest_plot$best_plsicox
lst_forest_plot$best_splsdrcox_mixOmics
####################
# DIAGNOSTIC PLOTS #
####################
ph_folder = paste0(folder, "ph_plot/")
lst_ph_preplot <- purrr::map(lst_models, ~survival::cox.zph(.$survival_model$fit))
lst_ph_plot <- purrr::map(lst_ph_preplot, ~survminer::ggcoxzph(.))
lst_ph_ggplot <- purrr::map2(.x = lst_ph_preplot, .y = lst_ph_plot, ~ggcoxzph2ggplot(.x, .y))
lst_ph_preplot
lst_ph_plot
lst_ph_ggplot$best_plsdacox_mixOmics
?ggcoxzph2ggplot
################
## EVENT PLOTS #
################
event_folder = paste0(folder, "event_plot/")
ggp_density.event <- event.density.plot(Y = Y_train, round = T, roundTo = 0.5)
ggp_density.event
psbeta_folder = paste0(folder, "pbetacox_plot/")
lst_models <- list("best_plsicox" = best_plsicox,
"best_splsdrcox" = best_splsdrcox,
"best_splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"best_plsdacox_mixOmics" = best_plsdacox_mixOmics)
ggp.simulated_beta <- purrr::map(lst_models, ~cox.pls.variable.plot(model = ., error.bar = T, onlySig = T, alpha = 0.05, zero.rm = T, auto.limits = T, top = 20))
ggp.simulated_beta$best_plsicox
ggp.simulated_beta$best_plsdacox_mixOmics
ggp.simulated_beta$best_splsdrcox_mixOmics
ggp.simulated_beta$best_splsdrcox
ggp.simulated_beta$best_plsdacox_mixOmics
warnings()
km_folder = paste0(folder, "km_plot/")
lst_models <- list("best_cox" = best_cox,
"best_coxSW" = best_coxSW,
"best_coxEN" = best_coxEN,
"best_plsicox" = best_plsicox,
"best_splsdrcox" = best_splsdrcox,
"best_splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"best_plsdacox_mixOmics" = best_plsdacox_mixOmics)
for(m in names(lst_models)){
if(all(is.null(lst_models[[m]]$survival_model))){
lst_models[[m]] <- NULL
}
LST_KM_RES <- purrr::map(lst_models, ~getAutoKM(type = "LP",
model = .,
comp = 1:max.ncomp,
top = 10,
ori_data = T,
BREAKTIME = NULL,
only_sig = F, alpha = 0.05, title = attr(., "model")))
LST_KM_RES$best_cox
LST_KM_RES$best_coxEN$LST_PLOTS$LP
LST_KM_RES$best_plsicox$LST_PLOTS$LP
LST_KM_RES$best_splsdrcox$LST_PLOTS$LP
LST_KM_RES$best_splsdrcox_mixOmics$LST_PLOTS$LP
LST_KM_RES$best_plsdacox_mixOmics$LST_PLOTS$LP
LST_KM_RES$best_cox$LST_PLOTS$LP
load_all()
check()
install()
path <- "D:/Pedro/Mega/Doctorado/Otros proyectos/"
#path = "/home/salguero/Proyectos/"
loadFunctions(path)
#load data
load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_E.MTAB.386.RData")
loadFunctions <- function(path){
loadGgplotTheme(path)
}
path <- "D:/Pedro/Mega/Doctorado/Otros proyectos/"
#path = "/home/salguero/Proyectos/"
loadFunctions(path)
#Load ggplot theme
loadGgplotTheme <- function(path){
file <- paste0(path,"ggplot_theme.R")
source(file, echo = F)
}
loadFunctions <- function(path){
loadGgplotTheme(path)
}
path <- "D:/Pedro/Mega/Doctorado/Otros proyectos/"
#path = "/home/salguero/Proyectos/"
loadFunctions(path)
#load data
load("D:/Pedro/Mega/Doctorado/Otros proyectos/data_E.MTAB.386.RData")
#load("data_E.MTAB.386.RData") #X and Y matrixes
#Parameters
n_run = 2
k_folds = 10
fast_mode = F
pred.method = "cenROC"
todaydate <- format(Sys.time(), '%Y-%m-%d')
txt_folder <- paste0("EMTAB386_",ifelse(fast_mode, "FAST_", "COMPLETE_"), pred.method, "_runs_", n_run, "_folds_", k_folds)
folder <- paste0(txt_folder,"_",todaydate,"/")
dir.create(folder)
#Set Train and Test
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #1103
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #472
Y_test <- Y[-index_train,]
#Algorithms Parameters
x.center = T
x.scale = F
y.center = F
y.scale = F
max.ncomp = 4
#Weights Parameters
w_AIC = 0
w_c.index = 0
w_AUC = 1
#Eval stop detection
MIN_AUC_INCREASE = 0.01
MIN_AUC = 0.75
MIN_COMP_TO_CHECK = 3
#others
return_models = F
MIN_EPV = 5
pred.attr = "mean"
seed = 123
alpha = 0.05
remove_non_significant = F #cox and coxEN variables
remove_non_significant_models = F  #plscox methods
times = seq(0.5, 7, 0.5)
PARALLEL = F
remove_near_zero_variance = T
toKeep.zv = NULL
max.iter = 500
aux_folder = paste0(folder, "plsicox_plot/")
dir.create(aux_folder)
cv.plsicox_res <- cv.plsicox(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds, alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
save_ggplot.svg(cv.plsicox_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AUC.svg")
save_ggplot.svg(cv.plsicox_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.plsicox_res_c_index.svg")
save_ggplot.svg(cv.plsicox_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AIC.svg")
best_plsicox <- plsicox(X = X_train, Y = data.matrix(Y_train),
n.comp = cv.plsicox_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale)
save(list = c("cv.plsicox_res", "best_plsicox"), file = paste0(aux_folder, "plsicox.RData"))
############
#libraries
library(HDcox)
library(RColorConesa) #from GitHub #devtools #usethis and get install.packages('hrbrthemes', repos='http://cran.us.r-project.org')
###########
# PLSRCOX #
###########
aux_folder = paste0(folder, "plsicox_plot/")
cv.plsicox_res <- cv.plsicox(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds, alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
v
PARALLEL
PARALLEL = T
cv.plsicox_res <- cv.plsicox(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds, alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.plsicox_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AUC.svg")
##save_ggplot.svg(cv.plsicox_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.plsicox_res_c_index.svg")
##save_ggplot.svg(cv.plsicox_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AIC.svg")
best_plsicox <- plsicox(X = X_train, Y = data.matrix(Y_train),
n.comp = cv.plsicox_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale)
set.seed(123)
X <- X[,sample(1:ncol(X), 500)]
#Parameters
n_run = 2
k_folds = 10
fast_mode = F
pred.method = "cenROC"
todaydate <- format(Sys.time(), '%Y-%m-%d')
txt_folder <- paste0("EMTAB386_",ifelse(fast_mode, "FAST_", "COMPLETE_"), pred.method, "_runs_", n_run, "_folds_", k_folds)
folder <- paste0(txt_folder,"_",todaydate,"/")
#dir.create(folder)
#Set Train and Test
set.seed(123)
index_train <- caret::createDataPartition(Y$event,
p = .7, #70% train
list = FALSE,
times = 1)
X_train <- X[index_train,] #1103
Y_train <- Y[index_train,]
X_test <- X[-index_train,] #472
Y_test <- Y[-index_train,]
#Algorithms Parameters
x.center = T
x.scale = F
y.center = F
y.scale = F
max.ncomp = 4
#Weights Parameters
w_AIC = 0
w_c.index = 0
w_AUC = 1
#Eval stop detection
MIN_AUC_INCREASE = 0.01
MIN_AUC = 0.75
MIN_COMP_TO_CHECK = 3
#others
return_models = F
MIN_EPV = 5
pred.attr = "mean"
seed = 123
alpha = 0.05
remove_non_significant = F #cox and coxEN variables
remove_non_significant_models = F  #plscox methods
times = seq(0.5, 7, 0.5)
PARALLEL = F
remove_near_zero_variance = T
toKeep.zv = NULL
max.iter = 500
#######
# COX #
#######
# aux_folder = paste0(folder, "cox_plot/")
# #dir.create(aux_folder)
# best_cox <- cox(X = X_train, Y = Y_train,
#                 x.center = x.center, x.scale = x.scale,
#                 y.center = y.center, y.scale = y.scale,
#                 remove_non_significant = remove_non_significant)
# #save(list = c("best_cox"), file = paste0(aux_folder, "cox.RData"))
############
# COX - SW #
############
# aux_folder = paste0(folder, "coxSW_plot/")
# #dir.create(aux_folder)
# best_coxSW <- coxSW(X = X_train, Y = Y_train,
#                     x.center = x.center, x.scale = x.scale,
#                     y.center = y.center, y.scale = y.scale,
#                     initialModel = "NULL", toKeep.sw = NULL,
#                     alpha = 0.05, alpha_ENT = 0.1, alpha_OUT = 0.15, alpha_PH = 0.05, check_PH = F,
#                     BACKWARDS = T, verbose = F)
# #save(list = c("best_coxSW"), file = paste0(aux_folder, "coxSW.RData"))
###########
# COX-GLM #
###########
aux_folder = paste0(folder, "coxEN_plot/")
#dir.create(aux_folder)
cv.coxEN_res <- cv.coxEN(X = X_train, Y = Y_train,
max.variables = ncol(X_train), EN.alpha.list = seq(0,1,0.1), #EN penalization
n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant = remove_non_significant, times = times,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.coxEN_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.coxEN_res_AUC.svg")
##save_ggplot.svg(cv.coxEN_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.coxEN_res_c_index.svg")
##save_ggplot.svg(cv.coxEN_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.coxEN_res_AIC.svg")
best_coxEN <- coxEN(X = X_train, Y = data.matrix(Y_train), EN.alpha = cv.coxEN_res$opt.EN.alpha,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
MIN_EPV = MIN_EPV, remove_non_significant = F, alpha = 0.05)
#save(list = c("cv.coxEN_res", "best_coxEN"), file = paste0(aux_folder, "coxEN.RData"))
###########
# PLSRCOX #
###########
aux_folder = paste0(folder, "plsicox_plot/")
#dir.create(aux_folder)
cv.plsicox_res <- cv.plsicox(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp,
n_run = n_run, k_folds = k_folds, alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.plsicox_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AUC.svg")
##save_ggplot.svg(cv.plsicox_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.plsicox_res_c_index.svg")
##save_ggplot.svg(cv.plsicox_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.plsicox_res_AIC.svg")
best_plsicox <- plsicox(X = X_train, Y = data.matrix(Y_train),
n.comp = cv.plsicox_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale)
#save(list = c("cv.plsicox_res", "best_plsicox"), file = paste0(aux_folder, "plsicox.RData"))
############
# sPLSRCOX #
############
aux_folder = paste0(folder, "splsdrcox_plot/")
#dir.create(aux_folder)
cv.splsdrcox_res <- cv.splsdrcox(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp, eta.list = c(0, 0.25, 0.5, 0.75),
n_run = n_run, k_folds = k_folds, alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.splsdrcox_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.splsdrcox_res_AUC.svg")
##save_ggplot.svg(cv.splsdrcox_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.splsdrcox_res_c_index.svg")
##save_ggplot.svg(cv.splsdrcox_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.splsdrcox_res_AIC.svg")
best_splsdrcox <- splsdrcox(X = X_train,
Y = data.matrix(Y_train),
n.comp = cv.splsdrcox_res$opt.comp,
eta = cv.splsdrcox_res$opt.eta,
x.center = x.center, x.scale = x.scale,
y.scale = y.scale, y.center = y.center)
#save(list = c("cv.splsdrcox_res", "best_splsdrcox"), file = paste0(aux_folder, "splsdrcox.RData"))
#####################
# sPLSRCOX_mixOmics #
#####################
aux_folder = paste0(folder, "splsdrcox_mixOmics_plot/")
#dir.create(aux_folder)
test.keepX <- NULL
max <- ncol(X_train)
min <- 5
if(max > 20){
test.keepX <- c(test.keepX, seq(1, max, ceiling(max/20)))
}else{
test.keepX <- c(test.keepX, seq(1, max, 1))
}
cv.splsdrcox_mixOmics_res <- cv.splsdrcox_mixOmics(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp, n_run = n_run, k_folds = k_folds,
n_run.mixOmics = 3, k_folds.mixOmics = 4, test.keepX = test.keepX,
alpha = alpha, remove_non_significant_models = remove_non_significant_models,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center, y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.splsdrcox_mixOmics_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.splsdrcox_mixOmics_res_AUC.svg")
##save_ggplot.svg(cv.splsdrcox_mixOmics_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.splsdrcox_mixOmics_res_c_index.svg")
##save_ggplot.svg(cv.splsdrcox_mixOmics_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.splsdrcox_mixOmics_res_AIC.svg")
best_splsdrcox_mixOmics <- splsdrcox_mixOmics(X = X_train,
Y = data.matrix(Y_train),
n.comp = cv.splsdrcox_mixOmics_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.scale = y.scale, y.center = y.center,
n_run.mixOmics = 5, k_folds.mixOmics = 10, test.keepX = test.keepX)
#save(list = c("cv.splsdrcox_mixOmics_res", "best_splsdrcox_mixOmics"), file = paste0(aux_folder, "splsdrcox_mixOmics.RData"))
#############
# plsDA-COX #
#############
#RAW DATA AS INPUT
aux_folder = paste0(folder, "plsdacox_mixOmics_plot/")
#dir.create(aux_folder)
cv.plsdacox_mixOmics_res <- cv.plsdacox_mixOmics(X = X_train, Y = data.matrix(Y_train),
max.ncomp = max.ncomp, n_run = n_run, k_folds = k_folds,
alpha = alpha, remove_non_significant_models = remove_non_significant_models, max.iter = max.iter,
w_AIC = w_AIC, w_c.index = w_c.index, w_AUC = w_AUC, times = times,
MIN_AUC_INCREASE = MIN_AUC_INCREASE, MIN_AUC = MIN_AUC, MIN_COMP_TO_CHECK = MIN_COMP_TO_CHECK,
x.scale = x.scale, x.center = x.center,
y.scale = y.scale, y.center = y.center,
fast_mode = fast_mode, return_models = return_models, MIN_EPV = MIN_EPV,
pred.attr = pred.attr, pred.method = pred.method, seed = seed, PARALLEL = PARALLEL)
##save_ggplot.svg(cv.plsdacox_mixOmics_res$plot_AUC, folder = aux_folder, wide = T, name = "cv.plsdacox_res_AUC.svg")
##save_ggplot.svg(cv.plsdacox_mixOmics_res$plot_c_index, folder = aux_folder, wide = T, name = "cv.plsdacox_res_c_index.svg")
##save_ggplot.svg(cv.plsdacox_mixOmics_res$plot_AIC, folder = aux_folder, wide = T, name = "cv.plsdacox_res_AIC.svg")
best_plsdacox_mixOmics <- plsdacox_mixOmics(X_train, Y_train,
n.comp = cv.plsdacox_mixOmics_res$opt.comp,
x.center = x.center, x.scale = x.scale,
y.center = y.center, y.scale = y.scale,
max.iter = max.iter)
#save(list = c("cv.plsdacox_mixOmics_res", "best_plsdacox_mixOmics"), file = paste0(aux_folder, "plsdacox_mixOmics.RData"))
##############
# EVALUATION #
##############
lst_evaluations <- c("survivalROC", "cenROC", "nsROC", "smoothROCtime_C", "smoothROCtime_I", "risksetROC")
names(lst_evaluations) <- lst_evaluations
lst_models <- list(#"cox" = best_cox,
#"coxSW" = best_coxSW,
"coxEN" = best_coxEN,
"plsicox" = best_plsicox,
"splsdrcox" = best_splsdrcox,
"splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"plsdacox_mixOmics" = best_plsdacox_mixOmics)
eval_results <- purrr::map(lst_evaluations, ~eval_models4.0(lst_models = lst_models,
X_test = X_test, Y_test = Y_test, pred.method = .,
pred.attr = pred.attr,
times = times, max_time_points = 15, PARALLEL = PARALLEL))
###############
# #save MODELS #
###############
lst_models_full <- list(#"best_cox" = best_cox,
#"best_coxSW" = best_coxSW,
"cv.coxEN_res" = cv.coxEN_res,
"coxEN" = best_coxEN,
"cv.plsicox_res" = cv.plsicox_res,
"plsicox" = best_plsicox,
"cv.splsdrcox_res" = cv.splsdrcox_res,
"splsdrcox" = best_splsdrcox,
"cv.splsdrcox_mixOmics_res" = cv.splsdrcox_mixOmics_res,
"splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"cv.plsdacox_mixOmics_res" = cv.plsdacox_mixOmics_res,
"plsdacox_mixOmics" = best_plsdacox_mixOmics)
lst_models <- list(#"cox" = best_cox,
#"coxSW" = best_coxSW,
"coxEN" = best_coxEN,
"plsicox" = best_plsicox,
"splsdrcox" = best_splsdrcox,
"splsdrcox_mixOmics" = best_splsdrcox_mixOmics,
"plsdacox_mixOmics" = best_plsdacox_mixOmics)
#save(list = c("lst_models_full"), file = paste0(folder, "lst_models_full.RData"))
#save(list = c("lst_models"), file = paste0(folder, "lst_models.RData"))
#############
# EVALPLOTS #
#############
evaluation_folder = paste0(folder, "evaluation_plot/")
#dir.create(evaluation_folder)
lst_ggp <- plot.multiple.evaluations(eval_results)
#save_ggplot_lst.svg(lst_plots = lst_ggp, object_name = "lineplot.mean", folder = evaluation_folder, wide = T, prefix = "eval_")
for(eval_name in names(lst_ggp)){
for(comp_name in names(lst_ggp[[eval_name]]$comparisons)){
###save_ggplot.svg(plot = lst_ggp[[eval_name]]$comparisons[[comp_name]], name = paste0("comparison_", eval_name, "_", comp_name), folder = evaluation_folder, wide = T)
##save_ggplot.svg(plot = lst_ggp[[eval_name]]$comparisons[[comp_name]], name = paste0("comparison_", eval_name, "_", comp_name), folder = evaluation_folder, wide = T)
}
#save(list = c("eval_results", "lst_ggp"), file = paste0(evaluation_folder, "eval_results.RData"))
########
# TIME #
########
time_folder = paste0(folder, "time_plot/")
#dir.create(time_folder)
lst_models <- list(#best_cox,
#best_coxSW,
cv.coxEN_res,
cv.plsicox_res,
cv.splsdrcox_res,
cv.splsdrcox_mixOmics_res,
cv.plsdacox_mixOmics_res,
eval_results)
ggp_time <- models.time.plot(lst_models)
##save_ggplot.svg(ggp_time, folder = time_folder, name = "time.svg", wide = T)
#save(list = c("lst_models"), file = paste0(time_folder, "time_results.RData"))
gc()
lst_ggp$
lst_ggp
lst_ggp <- plot.multiple.evaluations(eval_results)
